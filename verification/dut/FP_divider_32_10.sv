// Generated by CIRCT firtool-1.62.0
module full_subtractor(
  input  [7:0] io_in_a,
               io_in_b,
  output [7:0] io_out_s,
  output       io_out_c
);

  wire [8:0] result = {1'h0, io_in_a} - {1'h0, io_in_b};
  assign io_out_s = result[7:0];
  assign io_out_c = result[8];
endmodule

module divider_BW25(
  input         clock,
                reset,
                io_in_ready,
                io_in_valid,
  input  [24:0] io_in_a,
                io_in_b,
  output [24:0] io_out_s,
  output        io_out_valid
);

  reg [49:0] a_aux_reg_0;
  reg [49:0] a_aux_reg_1;
  reg [49:0] a_aux_reg_2;
  reg [49:0] a_aux_reg_3;
  reg [49:0] a_aux_reg_4;
  reg [49:0] a_aux_reg_5;
  reg [49:0] a_aux_reg_6;
  reg [49:0] a_aux_reg_7;
  reg [49:0] a_aux_reg_8;
  reg [49:0] b_aux_reg_0;
  reg [49:0] b_aux_reg_1;
  reg [49:0] b_aux_reg_2;
  reg [49:0] b_aux_reg_3;
  reg [49:0] b_aux_reg_4;
  reg [49:0] b_aux_reg_5;
  reg [49:0] b_aux_reg_6;
  reg [49:0] b_aux_reg_7;
  reg [49:0] b_aux_reg_8;
  reg [24:0] result_reg_0;
  reg [24:0] result_reg_1;
  reg [24:0] result_reg_2;
  reg [24:0] result_reg_3;
  reg [24:0] result_reg_4;
  reg [24:0] result_reg_5;
  reg [24:0] result_reg_6;
  reg [24:0] result_reg_7;
  reg [24:0] result_reg_8;
  reg [24:0] result_reg_9;
  reg        sr_out_valid_0;
  reg        sr_out_valid_1;
  reg        sr_out_valid_2;
  reg        sr_out_valid_3;
  reg        sr_out_valid_4;
  reg        sr_out_valid_5;
  reg        sr_out_valid_6;
  reg        sr_out_valid_7;
  reg        sr_out_valid_8;
  reg        sr_out_valid_9;
  always @(posedge clock) begin
    if (reset) begin
      a_aux_reg_0 <= 50'h0;
      a_aux_reg_1 <= 50'h0;
      a_aux_reg_2 <= 50'h0;
      a_aux_reg_3 <= 50'h0;
      a_aux_reg_4 <= 50'h0;
      a_aux_reg_5 <= 50'h0;
      a_aux_reg_6 <= 50'h0;
      a_aux_reg_7 <= 50'h0;
      a_aux_reg_8 <= 50'h0;
      b_aux_reg_0 <= 50'h0;
      b_aux_reg_1 <= 50'h0;
      b_aux_reg_2 <= 50'h0;
      b_aux_reg_3 <= 50'h0;
      b_aux_reg_4 <= 50'h0;
      b_aux_reg_5 <= 50'h0;
      b_aux_reg_6 <= 50'h0;
      b_aux_reg_7 <= 50'h0;
      b_aux_reg_8 <= 50'h0;
      result_reg_0 <= 25'h0;
      result_reg_1 <= 25'h0;
      result_reg_2 <= 25'h0;
      result_reg_3 <= 25'h0;
      result_reg_4 <= 25'h0;
      result_reg_5 <= 25'h0;
      result_reg_6 <= 25'h0;
      result_reg_7 <= 25'h0;
      result_reg_8 <= 25'h0;
      result_reg_9 <= 25'h0;
      sr_out_valid_0 <= 1'h0;
      sr_out_valid_1 <= 1'h0;
      sr_out_valid_2 <= 1'h0;
      sr_out_valid_3 <= 1'h0;
      sr_out_valid_4 <= 1'h0;
      sr_out_valid_5 <= 1'h0;
      sr_out_valid_6 <= 1'h0;
      sr_out_valid_7 <= 1'h0;
      sr_out_valid_8 <= 1'h0;
      sr_out_valid_9 <= 1'h0;
    end
    else if (io_in_ready) begin
      automatic logic        t_24 = io_in_a >= io_in_b;
      automatic logic [49:0] _GEN = {1'h0, b_aux_reg_0[49:1]};
      automatic logic        t_1_23 = a_aux_reg_0 >= _GEN;
      automatic logic [49:0] _GEN_0 = {1'h0, b_aux_reg_1[49:1]};
      automatic logic        t_2_22 = a_aux_reg_1 >= _GEN_0;
      automatic logic [49:0] _GEN_1 = {1'h0, b_aux_reg_2[49:1]};
      automatic logic        t_3_21 = a_aux_reg_2 >= _GEN_1;
      automatic logic [49:0] _GEN_2 = {1'h0, b_aux_reg_3[49:1]};
      automatic logic        t_4_20 = a_aux_reg_3 >= _GEN_2;
      automatic logic [49:0] _GEN_3 = {1'h0, b_aux_reg_4[49:1]};
      automatic logic        t_5_19 = a_aux_reg_4 >= _GEN_3;
      automatic logic [49:0] _GEN_4 = {1'h0, b_aux_reg_5[49:1]};
      automatic logic        t_6_18 = a_aux_reg_5 >= _GEN_4;
      automatic logic [49:0] _GEN_5 = {1'h0, b_aux_reg_6[49:1]};
      automatic logic        t_7_17 = a_aux_reg_6 >= _GEN_5;
      automatic logic [49:0] _GEN_6 = {1'h0, b_aux_reg_7[49:1]};
      automatic logic        t_8_16 = a_aux_reg_7 >= _GEN_6;
      a_aux_reg_0 <= t_24 ? {io_in_a, 25'h0} - {io_in_b, 25'h0} : {io_in_a, 25'h0};
      a_aux_reg_1 <= t_1_23 ? a_aux_reg_0 - _GEN : a_aux_reg_0;
      a_aux_reg_2 <= t_2_22 ? a_aux_reg_1 - _GEN_0 : a_aux_reg_1;
      a_aux_reg_3 <= t_3_21 ? a_aux_reg_2 - _GEN_1 : a_aux_reg_2;
      a_aux_reg_4 <= t_4_20 ? a_aux_reg_3 - _GEN_2 : a_aux_reg_3;
      a_aux_reg_5 <= t_5_19 ? a_aux_reg_4 - _GEN_3 : a_aux_reg_4;
      a_aux_reg_6 <= t_6_18 ? a_aux_reg_5 - _GEN_4 : a_aux_reg_5;
      a_aux_reg_7 <= t_7_17 ? a_aux_reg_6 - _GEN_5 : a_aux_reg_6;
      a_aux_reg_8 <= t_8_16 ? a_aux_reg_7 - _GEN_6 : a_aux_reg_7;
      b_aux_reg_0 <= {io_in_b, 25'h0};
      b_aux_reg_1 <= _GEN;
      b_aux_reg_2 <= _GEN_0;
      b_aux_reg_3 <= _GEN_1;
      b_aux_reg_4 <= _GEN_2;
      b_aux_reg_5 <= _GEN_3;
      b_aux_reg_6 <= _GEN_4;
      b_aux_reg_7 <= _GEN_5;
      b_aux_reg_8 <= _GEN_6;
      result_reg_0 <= {t_24, 24'h0};
      result_reg_1 <= {result_reg_0[24], t_1_23, result_reg_0[22:0]};
      result_reg_2 <= {result_reg_1[24:23], t_2_22, result_reg_1[21:0]};
      result_reg_3 <= {result_reg_2[24:22], t_3_21, result_reg_2[20:0]};
      result_reg_4 <= {result_reg_3[24:21], t_4_20, result_reg_3[19:0]};
      result_reg_5 <= {result_reg_4[24:20], t_5_19, result_reg_4[18:0]};
      result_reg_6 <= {result_reg_5[24:19], t_6_18, result_reg_5[17:0]};
      result_reg_7 <= {result_reg_6[24:18], t_7_17, result_reg_6[16:0]};
      result_reg_8 <= {result_reg_7[24:17], t_8_16, result_reg_7[15:0]};
      result_reg_9 <=
        {result_reg_8[24:16],
         a_aux_reg_8 >= {1'h0, b_aux_reg_8[49:1]},
         result_reg_8[14:0]};
      sr_out_valid_0 <= io_in_valid;
      sr_out_valid_1 <= sr_out_valid_0;
      sr_out_valid_2 <= sr_out_valid_1;
      sr_out_valid_3 <= sr_out_valid_2;
      sr_out_valid_4 <= sr_out_valid_3;
      sr_out_valid_5 <= sr_out_valid_4;
      sr_out_valid_6 <= sr_out_valid_5;
      sr_out_valid_7 <= sr_out_valid_6;
      sr_out_valid_8 <= sr_out_valid_7;
      sr_out_valid_9 <= sr_out_valid_8;
    end
  end // always @(posedge)
  assign io_out_s = result_reg_9;
  assign io_out_valid = sr_out_valid_9;
endmodule

module FP_divider_32_10(
  input         clock,
                reset,
                io_in_en,
                io_in_valid,
  input  [31:0] io_in_a,
                io_in_b,
  output [31:0] io_out_s,
  output        io_out_valid
);

  wire [24:0] _divider_BW25_io_out_s;
  wire [7:0]  _postProcess_exp_subtractor_io_out_s;
  wire        _postProcess_exp_subtractor_io_out_c;
  wire [7:0]  exp_wire_1 =
    (&(io_in_b[30:23])) ? 8'hFE : io_in_b[30:23] == 8'h0 ? 8'h1 : io_in_b[30:23];
  reg         uo_check_r;
  reg         uo_check_r_1;
  reg         uo_check_r_2;
  reg         uo_check_r_3;
  reg         uo_check_r_4;
  reg         uo_check_r_5;
  reg         uo_check_r_6;
  reg         uo_check_r_7;
  reg         uo_check_r_8;
  reg         uo_check;
  reg         carry_flag_r;
  reg         carry_flag_r_1;
  reg         carry_flag_r_2;
  reg         carry_flag_r_3;
  reg         carry_flag_r_4;
  reg         carry_flag_r_5;
  reg         carry_flag_r_6;
  reg         carry_flag_r_7;
  reg         carry_flag_r_8;
  reg         carry_flag;
  reg  [7:0]  exp_sum_r;
  reg  [7:0]  exp_sum_r_1;
  reg  [7:0]  exp_sum_r_2;
  reg  [7:0]  exp_sum_r_3;
  reg  [7:0]  exp_sum_r_4;
  reg  [7:0]  exp_sum_r_5;
  reg  [7:0]  exp_sum_r_6;
  reg  [7:0]  exp_sum_r_7;
  reg  [7:0]  exp_sum_r_8;
  reg  [7:0]  exp_sum;
  reg         new_sign_reg_r;
  reg         new_sign_reg_r_1;
  reg         new_sign_reg_r_2;
  reg         new_sign_reg_r_3;
  reg         new_sign_reg_r_4;
  reg         new_sign_reg_r_5;
  reg         new_sign_reg_r_6;
  reg         new_sign_reg_r_7;
  reg         new_sign_reg_r_8;
  reg         new_sign_reg;
  wire [8:0]  _GEN = {1'h0, exp_sum};
  wire [8:0]  _GEN_0 = {8'h0, ~(_divider_BW25_io_out_s[24])};
  wire        o_flag_reg = uo_check & (~carry_flag | _GEN - _GEN_0 > 9'hFE);
  wire        u_flag_reg = ~uo_check & (carry_flag | _GEN - _GEN_0 == 9'h0);
  always @(posedge clock) begin
    if (io_in_en) begin
      uo_check_r <= exp_wire_1 < 8'h7F;
      uo_check_r_1 <= uo_check_r;
      uo_check_r_2 <= uo_check_r_1;
      uo_check_r_3 <= uo_check_r_2;
      uo_check_r_4 <= uo_check_r_3;
      uo_check_r_5 <= uo_check_r_4;
      uo_check_r_6 <= uo_check_r_5;
      uo_check_r_7 <= uo_check_r_6;
      uo_check_r_8 <= uo_check_r_7;
      uo_check <= uo_check_r_8;
      carry_flag_r <= _postProcess_exp_subtractor_io_out_c;
      carry_flag_r_1 <= carry_flag_r;
      carry_flag_r_2 <= carry_flag_r_1;
      carry_flag_r_3 <= carry_flag_r_2;
      carry_flag_r_4 <= carry_flag_r_3;
      carry_flag_r_5 <= carry_flag_r_4;
      carry_flag_r_6 <= carry_flag_r_5;
      carry_flag_r_7 <= carry_flag_r_6;
      carry_flag_r_8 <= carry_flag_r_7;
      carry_flag <= carry_flag_r_8;
      exp_sum_r <= _postProcess_exp_subtractor_io_out_s;
      exp_sum_r_1 <= exp_sum_r;
      exp_sum_r_2 <= exp_sum_r_1;
      exp_sum_r_3 <= exp_sum_r_2;
      exp_sum_r_4 <= exp_sum_r_3;
      exp_sum_r_5 <= exp_sum_r_4;
      exp_sum_r_6 <= exp_sum_r_5;
      exp_sum_r_7 <= exp_sum_r_6;
      exp_sum_r_8 <= exp_sum_r_7;
      exp_sum <= exp_sum_r_8;
      new_sign_reg_r <= io_in_a[31] ^ io_in_b[31];
      new_sign_reg_r_1 <= new_sign_reg_r;
      new_sign_reg_r_2 <= new_sign_reg_r_1;
      new_sign_reg_r_3 <= new_sign_reg_r_2;
      new_sign_reg_r_4 <= new_sign_reg_r_3;
      new_sign_reg_r_5 <= new_sign_reg_r_4;
      new_sign_reg_r_6 <= new_sign_reg_r_5;
      new_sign_reg_r_7 <= new_sign_reg_r_6;
      new_sign_reg_r_8 <= new_sign_reg_r_7;
      new_sign_reg <= new_sign_reg_r_8;
    end
  end // always @(posedge)
  full_subtractor postProcess_exp_subtractor (
    .io_in_a
      ((&(io_in_a[30:23])) ? 8'hFE : io_in_a[30:23] == 8'h0 ? 8'h1 : io_in_a[30:23]),
    .io_in_b  (exp_wire_1 - 8'h7F),
    .io_out_s (_postProcess_exp_subtractor_io_out_s),
    .io_out_c (_postProcess_exp_subtractor_io_out_c)
  );
  divider_BW25 divider_BW25 (
    .clock        (clock),
    .reset        (reset),
    .io_in_ready  (io_in_en),
    .io_in_valid  (io_in_valid),
    .io_in_a      ({1'h1, io_in_a[22:0], 1'h0}),
    .io_in_b      ({1'h1, io_in_b[22:0], 1'h0}),
    .io_out_s     (_divider_BW25_io_out_s),
    .io_out_valid (io_out_valid)
  );
  assign io_out_s =
    {new_sign_reg,
     o_flag_reg
       ? 8'hFE
       : u_flag_reg ? 8'h1 : _divider_BW25_io_out_s[24] ? exp_sum : exp_sum - 8'h1,
     o_flag_reg
       ? 23'h7FFFFF
       : u_flag_reg
           ? 23'h0
           : _divider_BW25_io_out_s[24]
               ? _divider_BW25_io_out_s[23:1]
               : _divider_BW25_io_out_s[22:0]};
endmodule

