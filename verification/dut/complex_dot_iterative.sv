// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

module full_adder(
  input  [7:0] io_in_a,
               io_in_b,
  output [7:0] io_out_s,
  output       io_out_c
);

  wire [8:0] result = {1'h0, io_in_a} + {1'h0, io_in_b};
  assign io_out_s = result[7:0];
  assign io_out_c = result[8];
endmodule

module multiplier(
  input  [23:0] io_in_a,
                io_in_b,
  output [47:0] io_out_s
);

  assign io_out_s = {24'h0, io_in_a} * {24'h0, io_in_b};
endmodule

module FP_mult_32_10_v2(
  input         clock,
                io_in_en,
  input  [31:0] io_in_a,
                io_in_b,
  output [31:0] io_out_s
);

  wire [47:0] _multiplier_io_out_s;
  wire [7:0]  _exp_adder_io_out_s;
  wire        _exp_adder_io_out_c;
  reg  [31:0] in_a;
  reg  [31:0] in_b;
  reg  [23:0] whole_frac_sr_0;
  reg  [23:0] whole_frac_sr_1;
  reg         sign_sr_0;
  reg         sign_sr_1;
  reg  [7:0]  exp_sr_0;
  reg  [7:0]  exp_sr_1;
  reg         new_sign_sr;
  reg  [7:0]  exp_sr_2_0;
  reg  [7:0]  exp_sr_2_1;
  reg  [23:0] whole_frac_sr_2_0;
  reg  [23:0] whole_frac_sr_2_1;
  reg  [7:0]  exp_adder_outs_sr;
  reg         exp_adder_outc_sr;
  reg         new_sign_sr_2;
  reg  [7:0]  exp_sr_3_1;
  reg  [23:0] whole_frac_sr_3_0;
  reg  [23:0] whole_frac_sr_3_1;
  reg  [47:0] frac_mult_out_sr;
  reg  [7:0]  exp_adder_outs_sr_2;
  reg         exp_adder_outc_sr_2;
  reg         new_sign_sr_3;
  reg  [7:0]  exp_sr_4_1;
  reg  [7:0]  uo_check_r;
  reg         carry_flag;
  reg  [7:0]  exp_sum;
  reg         new_sign_reg;
  reg         msb_check;
  reg  [47:0] new_frac_reg;
  reg         u_flag_reg;
  reg         o_flag_reg;
  reg  [7:0]  new_exp_reg;
  reg         new_sign_reg_2;
  reg  [47:0] new_frac_reg_2;
  reg  [7:0]  out_exp_innermux;
  reg  [22:0] out_frac_innermux;
  reg         u_flag_reg_2;
  reg         o_flag_reg_2;
  reg         new_sign_reg_3;
  reg  [7:0]  out_exp_innermux_2;
  reg  [22:0] out_frac_innermux_2;
  reg         new_sign_reg_4;
  reg         u_flag_reg_3;
  reg  [31:0] io_out_s_r;
  always @(posedge clock) begin
    if (io_in_en) begin
      automatic logic       uo_check = uo_check_r < 8'h7F;
      automatic logic [8:0] _o_flag_reg_T_1 = {1'h0, exp_sum} + {8'h0, msb_check};
      in_a <= io_in_a;
      in_b <= io_in_b;
      whole_frac_sr_0 <= {1'h1, in_a[22:0]};
      whole_frac_sr_1 <= {1'h1, in_b[22:0]};
      sign_sr_0 <= in_a[31];
      sign_sr_1 <= in_b[31];
      exp_sr_0 <= (&(in_a[30:23])) ? 8'hFE : in_a[30:23] == 8'h0 ? 8'h1 : in_a[30:23];
      exp_sr_1 <= (&(in_b[30:23])) ? 8'hFE : in_b[30:23] == 8'h0 ? 8'h1 : in_b[30:23];
      new_sign_sr <= sign_sr_0 ^ sign_sr_1;
      exp_sr_2_0 <= exp_sr_0;
      exp_sr_2_1 <= exp_sr_1;
      whole_frac_sr_2_0 <= whole_frac_sr_0;
      whole_frac_sr_2_1 <= whole_frac_sr_1;
      exp_adder_outs_sr <= _exp_adder_io_out_s;
      exp_adder_outc_sr <= _exp_adder_io_out_c;
      new_sign_sr_2 <= new_sign_sr;
      exp_sr_3_1 <= exp_sr_2_1;
      whole_frac_sr_3_0 <= whole_frac_sr_2_0;
      whole_frac_sr_3_1 <= whole_frac_sr_2_1;
      frac_mult_out_sr <= _multiplier_io_out_s;
      exp_adder_outs_sr_2 <= exp_adder_outs_sr;
      exp_adder_outc_sr_2 <= exp_adder_outc_sr;
      new_sign_sr_3 <= new_sign_sr_2;
      exp_sr_4_1 <= exp_sr_3_1;
      uo_check_r <= exp_sr_4_1;
      carry_flag <= exp_adder_outc_sr_2;
      exp_sum <= exp_adder_outs_sr_2;
      new_sign_reg <= new_sign_sr_3;
      msb_check <= frac_mult_out_sr[47];
      new_frac_reg <= frac_mult_out_sr;
      u_flag_reg <= uo_check & (~carry_flag | _o_flag_reg_T_1 == 9'h0);
      o_flag_reg <= ~uo_check & (carry_flag | _o_flag_reg_T_1 > 9'hFE);
      new_exp_reg <= exp_sum;
      new_sign_reg_2 <= new_sign_reg;
      new_frac_reg_2 <= new_frac_reg;
      out_exp_innermux <= new_frac_reg_2[47] ? new_exp_reg + 8'h1 : new_exp_reg;
      out_frac_innermux <=
        new_frac_reg_2[47] ? new_frac_reg_2[46:24] : new_frac_reg_2[45:23];
      u_flag_reg_2 <= u_flag_reg;
      o_flag_reg_2 <= o_flag_reg;
      new_sign_reg_3 <= new_sign_reg_2;
      out_exp_innermux_2 <= o_flag_reg_2 ? 8'hFE : out_exp_innermux;
      out_frac_innermux_2 <= o_flag_reg_2 ? 23'h7FFFFF : out_frac_innermux;
      new_sign_reg_4 <= new_sign_reg_3;
      u_flag_reg_3 <= u_flag_reg_2;
      io_out_s_r <=
        {new_sign_reg_4,
         u_flag_reg_3 ? 8'h1 : out_exp_innermux_2,
         u_flag_reg_3 ? 23'h0 : out_frac_innermux_2};
    end
  end // always @(posedge)
  full_adder exp_adder (
    .io_in_a  (exp_sr_2_0),
    .io_in_b  (exp_sr_2_1 - 8'h7F),
    .io_out_s (_exp_adder_io_out_s),
    .io_out_c (_exp_adder_io_out_c)
  );
  multiplier multiplier (
    .io_in_a  (whole_frac_sr_3_0),
    .io_in_b  (whole_frac_sr_3_1),
    .io_out_s (_multiplier_io_out_s)
  );
  assign io_out_s = io_out_s_r;
endmodule

module full_subtractor(
  input  [7:0] io_in_a,
               io_in_b,
  output [7:0] io_out_s,
  output       io_out_c
);

  wire [8:0] result = {1'h0, io_in_a} - {1'h0, io_in_b};
  assign io_out_s = result[7:0];
  assign io_out_c = result[8];
endmodule

module full_adder_4(
  input  [23:0] io_in_a,
                io_in_b,
  output [23:0] io_out_s,
  output        io_out_c
);

  wire [24:0] result = {1'h0, io_in_a} + {1'h0, io_in_b};
  assign io_out_s = result[23:0];
  assign io_out_c = result[24];
endmodule

module LZC_enc2(
  input  [1:0] io_in_r,
  output [1:0] io_out_e
);

  assign io_out_e = io_in_r == 2'h0 ? 2'h2 : {1'h0, io_in_r == 2'h1};
endmodule

module LZC_Merge2(
  input  [1:0] io_in_h,
               io_in_l,
  output [2:0] io_out_m
);

  assign io_out_m =
    {io_in_h[1] & io_in_l[1],
     io_in_h[1] ? ~(io_in_l[1]) : io_in_h[1],
     io_in_h[1] ? io_in_l[0] : io_in_h[0]};
endmodule

module LZC_Merge3(
  input  [2:0] io_in_h,
               io_in_l,
  output [3:0] io_out_m
);

  assign io_out_m =
    {io_in_h[2] & io_in_l[2],
     io_in_h[2] ? ~(io_in_l[2]) : io_in_h[2],
     io_in_h[2] ? io_in_l[1:0] : io_in_h[1:0]};
endmodule

module LZC_Merge4(
  input  [3:0] io_in_h,
               io_in_l,
  output [4:0] io_out_m
);

  assign io_out_m =
    {io_in_h[3] & io_in_l[3],
     io_in_h[3] ? ~(io_in_l[3]) : io_in_h[3],
     io_in_h[3] ? io_in_l[2:0] : io_in_h[2:0]};
endmodule

module LZC_Merge5(
  input  [4:0] io_in_h,
               io_in_l,
  output [5:0] io_out_m
);

  assign io_out_m =
    {io_in_h[4] & io_in_l[4],
     io_in_h[4] ? ~(io_in_l[4]) : io_in_h[4],
     io_in_h[4] ? io_in_l[3:0] : io_in_h[3:0]};
endmodule

module LZC32_2(
  input  [31:0] io_in_d,
  output [5:0]  io_out_c
);

  wire [4:0] _LZC_Merge4_1_io_out_m;
  wire [4:0] _LZC_Merge4_io_out_m;
  wire [3:0] _LZC_Merge3_3_io_out_m;
  wire [3:0] _LZC_Merge3_2_io_out_m;
  wire [3:0] _LZC_Merge3_1_io_out_m;
  wire [3:0] _LZC_Merge3_io_out_m;
  wire [2:0] _LZC_Merge2_7_io_out_m;
  wire [2:0] _LZC_Merge2_6_io_out_m;
  wire [2:0] _LZC_Merge2_5_io_out_m;
  wire [2:0] _LZC_Merge2_4_io_out_m;
  wire [2:0] _LZC_Merge2_3_io_out_m;
  wire [2:0] _LZC_Merge2_2_io_out_m;
  wire [2:0] _LZC_Merge2_1_io_out_m;
  wire [2:0] _LZC_Merge2_io_out_m;
  wire [1:0] _LZC_enc2_15_io_out_e;
  wire [1:0] _LZC_enc2_14_io_out_e;
  wire [1:0] _LZC_enc2_13_io_out_e;
  wire [1:0] _LZC_enc2_12_io_out_e;
  wire [1:0] _LZC_enc2_11_io_out_e;
  wire [1:0] _LZC_enc2_10_io_out_e;
  wire [1:0] _LZC_enc2_9_io_out_e;
  wire [1:0] _LZC_enc2_8_io_out_e;
  wire [1:0] _LZC_enc2_7_io_out_e;
  wire [1:0] _LZC_enc2_6_io_out_e;
  wire [1:0] _LZC_enc2_5_io_out_e;
  wire [1:0] _LZC_enc2_4_io_out_e;
  wire [1:0] _LZC_enc2_3_io_out_e;
  wire [1:0] _LZC_enc2_2_io_out_e;
  wire [1:0] _LZC_enc2_1_io_out_e;
  wire [1:0] _LZC_enc2_io_out_e;
  LZC_enc2 LZC_enc2 (
    .io_in_r  (io_in_d[1:0]),
    .io_out_e (_LZC_enc2_io_out_e)
  );
  LZC_enc2 LZC_enc2_1 (
    .io_in_r  (io_in_d[3:2]),
    .io_out_e (_LZC_enc2_1_io_out_e)
  );
  LZC_enc2 LZC_enc2_2 (
    .io_in_r  (io_in_d[5:4]),
    .io_out_e (_LZC_enc2_2_io_out_e)
  );
  LZC_enc2 LZC_enc2_3 (
    .io_in_r  (io_in_d[7:6]),
    .io_out_e (_LZC_enc2_3_io_out_e)
  );
  LZC_enc2 LZC_enc2_4 (
    .io_in_r  (io_in_d[9:8]),
    .io_out_e (_LZC_enc2_4_io_out_e)
  );
  LZC_enc2 LZC_enc2_5 (
    .io_in_r  (io_in_d[11:10]),
    .io_out_e (_LZC_enc2_5_io_out_e)
  );
  LZC_enc2 LZC_enc2_6 (
    .io_in_r  (io_in_d[13:12]),
    .io_out_e (_LZC_enc2_6_io_out_e)
  );
  LZC_enc2 LZC_enc2_7 (
    .io_in_r  (io_in_d[15:14]),
    .io_out_e (_LZC_enc2_7_io_out_e)
  );
  LZC_enc2 LZC_enc2_8 (
    .io_in_r  (io_in_d[17:16]),
    .io_out_e (_LZC_enc2_8_io_out_e)
  );
  LZC_enc2 LZC_enc2_9 (
    .io_in_r  (io_in_d[19:18]),
    .io_out_e (_LZC_enc2_9_io_out_e)
  );
  LZC_enc2 LZC_enc2_10 (
    .io_in_r  (io_in_d[21:20]),
    .io_out_e (_LZC_enc2_10_io_out_e)
  );
  LZC_enc2 LZC_enc2_11 (
    .io_in_r  (io_in_d[23:22]),
    .io_out_e (_LZC_enc2_11_io_out_e)
  );
  LZC_enc2 LZC_enc2_12 (
    .io_in_r  (io_in_d[25:24]),
    .io_out_e (_LZC_enc2_12_io_out_e)
  );
  LZC_enc2 LZC_enc2_13 (
    .io_in_r  (io_in_d[27:26]),
    .io_out_e (_LZC_enc2_13_io_out_e)
  );
  LZC_enc2 LZC_enc2_14 (
    .io_in_r  (io_in_d[29:28]),
    .io_out_e (_LZC_enc2_14_io_out_e)
  );
  LZC_enc2 LZC_enc2_15 (
    .io_in_r  (io_in_d[31:30]),
    .io_out_e (_LZC_enc2_15_io_out_e)
  );
  LZC_Merge2 LZC_Merge2 (
    .io_in_h  (_LZC_enc2_15_io_out_e),
    .io_in_l  (_LZC_enc2_14_io_out_e),
    .io_out_m (_LZC_Merge2_io_out_m)
  );
  LZC_Merge2 LZC_Merge2_1 (
    .io_in_h  (_LZC_enc2_13_io_out_e),
    .io_in_l  (_LZC_enc2_12_io_out_e),
    .io_out_m (_LZC_Merge2_1_io_out_m)
  );
  LZC_Merge2 LZC_Merge2_2 (
    .io_in_h  (_LZC_enc2_11_io_out_e),
    .io_in_l  (_LZC_enc2_10_io_out_e),
    .io_out_m (_LZC_Merge2_2_io_out_m)
  );
  LZC_Merge2 LZC_Merge2_3 (
    .io_in_h  (_LZC_enc2_9_io_out_e),
    .io_in_l  (_LZC_enc2_8_io_out_e),
    .io_out_m (_LZC_Merge2_3_io_out_m)
  );
  LZC_Merge2 LZC_Merge2_4 (
    .io_in_h  (_LZC_enc2_7_io_out_e),
    .io_in_l  (_LZC_enc2_6_io_out_e),
    .io_out_m (_LZC_Merge2_4_io_out_m)
  );
  LZC_Merge2 LZC_Merge2_5 (
    .io_in_h  (_LZC_enc2_5_io_out_e),
    .io_in_l  (_LZC_enc2_4_io_out_e),
    .io_out_m (_LZC_Merge2_5_io_out_m)
  );
  LZC_Merge2 LZC_Merge2_6 (
    .io_in_h  (_LZC_enc2_3_io_out_e),
    .io_in_l  (_LZC_enc2_2_io_out_e),
    .io_out_m (_LZC_Merge2_6_io_out_m)
  );
  LZC_Merge2 LZC_Merge2_7 (
    .io_in_h  (_LZC_enc2_1_io_out_e),
    .io_in_l  (_LZC_enc2_io_out_e),
    .io_out_m (_LZC_Merge2_7_io_out_m)
  );
  LZC_Merge3 LZC_Merge3 (
    .io_in_h  (_LZC_Merge2_io_out_m),
    .io_in_l  (_LZC_Merge2_1_io_out_m),
    .io_out_m (_LZC_Merge3_io_out_m)
  );
  LZC_Merge3 LZC_Merge3_1 (
    .io_in_h  (_LZC_Merge2_2_io_out_m),
    .io_in_l  (_LZC_Merge2_3_io_out_m),
    .io_out_m (_LZC_Merge3_1_io_out_m)
  );
  LZC_Merge3 LZC_Merge3_2 (
    .io_in_h  (_LZC_Merge2_4_io_out_m),
    .io_in_l  (_LZC_Merge2_5_io_out_m),
    .io_out_m (_LZC_Merge3_2_io_out_m)
  );
  LZC_Merge3 LZC_Merge3_3 (
    .io_in_h  (_LZC_Merge2_6_io_out_m),
    .io_in_l  (_LZC_Merge2_7_io_out_m),
    .io_out_m (_LZC_Merge3_3_io_out_m)
  );
  LZC_Merge4 LZC_Merge4 (
    .io_in_h  (_LZC_Merge3_io_out_m),
    .io_in_l  (_LZC_Merge3_1_io_out_m),
    .io_out_m (_LZC_Merge4_io_out_m)
  );
  LZC_Merge4 LZC_Merge4_1 (
    .io_in_h  (_LZC_Merge3_2_io_out_m),
    .io_in_l  (_LZC_Merge3_3_io_out_m),
    .io_out_m (_LZC_Merge4_1_io_out_m)
  );
  LZC_Merge5 LZC_Merge5 (
    .io_in_h  (_LZC_Merge4_io_out_m),
    .io_in_l  (_LZC_Merge4_1_io_out_m),
    .io_out_m (io_out_c)
  );
endmodule

module FP_add_32_13(
  input         clock,
                io_in_en,
  input  [31:0] io_in_a,
                io_in_b,
  output [31:0] io_out_s
);

  wire [5:0]  _LZC32_2_io_out_c;
  wire [23:0] _full_adder_io_out_s;
  wire        _full_adder_io_out_c;
  wire [7:0]  _exp_subtractor_io_out_s;
  wire        _exp_subtractor_io_out_c;
  reg  [31:0] in_a;
  reg  [31:0] in_b;
  reg  [7:0]  exp_sr_0;
  reg  [7:0]  exp_sr_1;
  reg  [23:0] whole_frac_sr_0;
  reg  [23:0] whole_frac_sr_1;
  reg         sign_sr_0;
  reg         sign_sr_1;
  reg         exp_sub_out_c_r;
  reg         exp_sub_out_c;
  reg  [7:0]  exp_sub_out_s_r;
  reg  [7:0]  exp_sub_out_s;
  reg  [7:0]  exp_sr_2_r_0;
  reg  [7:0]  exp_sr_2_r_1;
  reg  [7:0]  exp_sr_2_0;
  reg  [7:0]  exp_sr_2_1;
  reg  [23:0] whole_frac_sr_2_r_0;
  reg  [23:0] whole_frac_sr_2_r_1;
  reg  [23:0] whole_frac_sr_2_0;
  reg  [23:0] whole_frac_sr_2_1;
  reg         sign_sr_2_r_0;
  reg         sign_sr_2_r_1;
  reg         sign_sr_2_0;
  reg         sign_sr_2_1;
  reg         eqexp_arrange;
  reg  [7:0]  exp_sr_3_0;
  reg  [7:0]  exp_sr_3_1;
  reg  [23:0] whole_frac_sr_3_0;
  reg  [23:0] whole_frac_sr_3_1;
  reg         sign_sr_3_0;
  reg         sign_sr_3_1;
  reg         exp_sub_out_c_2;
  reg  [7:0]  exp_sub_out_s_2;
  reg         redundant_op;
  reg  [23:0] fracadd_in_a;
  reg  [23:0] fracadd_in_b;
  reg  [7:0]  ref_exp;
  reg         ref_sign;
  reg         diff_sign;
  reg         frac_adder_out_c_r;
  reg         frac_adder_out_c;
  reg  [23:0] frac_adder_out_s_r;
  reg  [23:0] frac_adder_out_s;
  reg         diff_sign_2_r;
  reg         diff_sign_2;
  reg         redundant_op_2_r;
  reg         redundant_op_2;
  reg         ref_sign_2_r;
  reg         ref_sign_2;
  reg  [7:0]  ref_exp_2_r;
  reg  [7:0]  ref_exp_2;
  reg         sign_out;
  reg  [23:0] fracadd_outs;
  reg         fracadd_outc;
  reg         diff_sign_3;
  reg  [7:0]  ref_exp_3;
  reg  [5:0]  leadzeroindex;
  reg  [7:0]  ref_exp_4;
  reg  [23:0] fracadd_outs_2;
  reg         diff_sign_4;
  reg         fracadd_outc_2;
  reg         sign_out_2;
  reg         diff_sign_5;
  reg  [85:0] innermux_frac_true;
  reg  [22:0] innermux_frac_false;
  reg  [7:0]  innermux_exp_true;
  reg  [7:0]  innermux_exp_false;
  reg         sign_out_3;
  reg  [85:0] norm_out_frac_r;
  reg  [85:0] norm_out_frac_r_1;
  reg  [7:0]  norm_out_exp_r;
  reg  [7:0]  norm_out_exp;
  reg         norm_out_sign_r;
  reg         norm_out_sign;
  always @(posedge clock) begin
    if (io_in_en) begin
      automatic logic        _GEN = exp_sub_out_c_2 | eqexp_arrange;
      automatic logic [8:0]  _GEN_0 = {1'h0, ref_exp_4};
      automatic logic [8:0]  red = _GEN_0 - {3'h0, leadzeroindex};
      automatic logic [8:0]  inc = _GEN_0 + 9'h1;
      automatic logic [85:0] _GEN_1 = {63'h0, fracadd_outs_2[22:0]};
      automatic logic        _innermux_exp_true_T_2 = red == 9'h0;
      automatic logic        _innermux_exp_false_T_2 = inc > 9'hFE;
      in_a <= io_in_a;
      in_b <= io_in_b;
      exp_sr_0 <=
        {1'h0, in_a[30:23]} > 9'hFE ? 8'hFE : in_a[30:23] == 8'h0 ? 8'h1 : in_a[30:23];
      exp_sr_1 <=
        {1'h0, in_b[30:23]} > 9'hFE ? 8'hFE : in_b[30:23] == 8'h0 ? 8'h1 : in_b[30:23];
      whole_frac_sr_0 <= {1'h1, in_a[22:0]};
      whole_frac_sr_1 <= {1'h1, in_b[22:0]};
      sign_sr_0 <= in_a[31];
      sign_sr_1 <= in_b[31];
      exp_sub_out_c_r <= _exp_subtractor_io_out_c;
      exp_sub_out_c <= exp_sub_out_c_r;
      exp_sub_out_s_r <= _exp_subtractor_io_out_s;
      exp_sub_out_s <= exp_sub_out_s_r;
      exp_sr_2_r_0 <= exp_sr_0;
      exp_sr_2_r_1 <= exp_sr_1;
      exp_sr_2_0 <= exp_sr_2_r_0;
      exp_sr_2_1 <= exp_sr_2_r_1;
      whole_frac_sr_2_r_0 <= whole_frac_sr_0;
      whole_frac_sr_2_r_1 <= whole_frac_sr_1;
      whole_frac_sr_2_0 <= whole_frac_sr_2_r_0;
      whole_frac_sr_2_1 <= whole_frac_sr_2_r_1;
      sign_sr_2_r_0 <= sign_sr_0;
      sign_sr_2_r_1 <= sign_sr_1;
      sign_sr_2_0 <= sign_sr_2_r_0;
      sign_sr_2_1 <= sign_sr_2_r_1;
      eqexp_arrange <= exp_sr_2_0 == exp_sr_2_1 & whole_frac_sr_2_1 > whole_frac_sr_2_0;
      exp_sr_3_0 <= exp_sr_2_0;
      exp_sr_3_1 <= exp_sr_2_1;
      whole_frac_sr_3_0 <= whole_frac_sr_2_0;
      whole_frac_sr_3_1 <= whole_frac_sr_2_1;
      sign_sr_3_0 <= sign_sr_2_0;
      sign_sr_3_1 <= sign_sr_2_1;
      exp_sub_out_c_2 <= exp_sub_out_c;
      exp_sub_out_s_2 <= exp_sub_out_s;
      redundant_op <=
        (exp_sub_out_c_2 ? ~exp_sub_out_s_2 + 8'h1 : exp_sub_out_s_2) > 8'h17;
      fracadd_in_a <= _GEN ? whole_frac_sr_3_1 : whole_frac_sr_3_0;
      fracadd_in_b <=
        exp_sub_out_c_2
          ? whole_frac_sr_3_0 >> ~exp_sub_out_s_2 + 8'h1
          : (eqexp_arrange ? whole_frac_sr_3_0 : whole_frac_sr_3_1) >> exp_sub_out_s_2;
      ref_exp <= exp_sub_out_c_2 ? exp_sr_3_1 : exp_sr_3_0;
      ref_sign <= _GEN ? sign_sr_3_1 : sign_sr_3_0;
      diff_sign <= sign_sr_3_0 ^ sign_sr_3_1;
      frac_adder_out_c_r <= _full_adder_io_out_c;
      frac_adder_out_c <= frac_adder_out_c_r;
      frac_adder_out_s_r <= _full_adder_io_out_s;
      frac_adder_out_s <= frac_adder_out_s_r;
      diff_sign_2_r <= diff_sign;
      diff_sign_2 <= diff_sign_2_r;
      redundant_op_2_r <= redundant_op;
      redundant_op_2 <= redundant_op_2_r;
      ref_sign_2_r <= ref_sign;
      ref_sign_2 <= ref_sign_2_r;
      ref_exp_2_r <= ref_exp;
      ref_exp_2 <= ref_exp_2_r;
      sign_out <= diff_sign_2 & ~redundant_op_2 & ~frac_adder_out_c ^ ref_sign_2;
      fracadd_outs <= frac_adder_out_s;
      fracadd_outc <= frac_adder_out_c;
      diff_sign_3 <= diff_sign_2;
      ref_exp_3 <= ref_exp_2;
      leadzeroindex <= _LZC32_2_io_out_c;
      ref_exp_4 <= ref_exp_3;
      fracadd_outs_2 <= fracadd_outs;
      diff_sign_4 <= diff_sign_3;
      fracadd_outc_2 <= fracadd_outc;
      sign_out_2 <= sign_out;
      diff_sign_5 <= diff_sign_4;
      innermux_frac_true <=
        fracadd_outs_2[23]
          ? _GEN_1
          : red[8] | _innermux_exp_true_T_2 ? 86'h0 : _GEN_1 << leadzeroindex;
      innermux_frac_false <=
        fracadd_outc_2
          ? (inc[8] | _innermux_exp_false_T_2 ? 23'h7FFFFF : fracadd_outs_2[23:1])
          : fracadd_outs_2[22:0];
      innermux_exp_true <=
        fracadd_outs_2[23]
          ? ref_exp_4
          : red[8] | _innermux_exp_true_T_2 ? 8'h1 : red[7:0];
      innermux_exp_false <=
        fracadd_outc_2
          ? (inc[8] | _innermux_exp_false_T_2 ? 8'hFE : inc[7:0])
          : ref_exp_4;
      sign_out_3 <= sign_out_2;
      norm_out_frac_r <= diff_sign_5 ? innermux_frac_true : {63'h0, innermux_frac_false};
      norm_out_frac_r_1 <= norm_out_frac_r;
      norm_out_exp_r <= diff_sign_5 ? innermux_exp_true : innermux_exp_false;
      norm_out_exp <= norm_out_exp_r;
      norm_out_sign_r <= sign_out_3;
      norm_out_sign <= norm_out_sign_r;
    end
  end // always @(posedge)
  full_subtractor exp_subtractor (
    .io_in_a  (exp_sr_0),
    .io_in_b  (exp_sr_1),
    .io_out_s (_exp_subtractor_io_out_s),
    .io_out_c (_exp_subtractor_io_out_c)
  );
  full_adder_4 full_adder (
    .io_in_a  (fracadd_in_a),
    .io_in_b  (diff_sign ? ~fracadd_in_b + 24'h1 : fracadd_in_b),
    .io_out_s (_full_adder_io_out_s),
    .io_out_c (_full_adder_io_out_c)
  );
  LZC32_2 LZC32_2 (
    .io_in_d  ({fracadd_outs, 8'hFF}),
    .io_out_c (_LZC32_2_io_out_c)
  );
  assign io_out_s = {norm_out_sign, norm_out_exp, norm_out_frac_r_1[22:0]};
endmodule

module complex_conjugate_mult(
  input         clock,
                reset,
  input  [63:0] io_complexA,
                io_complexB,
  input         io_in_en,
  output [63:0] io_out_s
);

  wire        _GEN;
  wire [31:0] _FP_adder_Inst_1_io_out_s;
  wire [31:0] _FP_adder_Inst_0_io_out_s;
  wire [31:0] _FP_mult_inst_3_io_out_s;
  wire [31:0] _FP_mult_inst_2_io_out_s;
  wire [31:0] _FP_mult_inst_1_io_out_s;
  wire [31:0] _FP_mult_inst_0_io_out_s;
  reg  [7:0]  counter;
  assign _GEN = io_in_en & counter > 8'h9;
  always @(posedge clock) begin
    if (reset)
      counter <= 8'h0;
    else if (io_in_en)
      counter <= counter + 8'h1;
  end // always @(posedge)
  FP_mult_32_10_v2 FP_mult_inst_0 (
    .clock    (clock),
    .io_in_en (io_in_en),
    .io_in_a  (io_complexA[63:32]),
    .io_in_b  (io_complexB[63:32]),
    .io_out_s (_FP_mult_inst_0_io_out_s)
  );
  FP_mult_32_10_v2 FP_mult_inst_1 (
    .clock    (clock),
    .io_in_en (io_in_en),
    .io_in_a  (io_complexA[31:0]),
    .io_in_b  (io_complexB[31:0]),
    .io_out_s (_FP_mult_inst_1_io_out_s)
  );
  FP_mult_32_10_v2 FP_mult_inst_2 (
    .clock    (clock),
    .io_in_en (io_in_en),
    .io_in_a  (io_complexA[31:0]),
    .io_in_b  (io_complexB[63:32]),
    .io_out_s (_FP_mult_inst_2_io_out_s)
  );
  FP_mult_32_10_v2 FP_mult_inst_3 (
    .clock    (clock),
    .io_in_en (io_in_en),
    .io_in_a  (io_complexA[63:32]),
    .io_in_b  (io_complexB[31:0]),
    .io_out_s (_FP_mult_inst_3_io_out_s)
  );
  FP_add_32_13 FP_adder_Inst_0 (
    .clock    (clock),
    .io_in_en (_GEN),
    .io_in_a  (_GEN ? _FP_mult_inst_0_io_out_s : 32'h0),
    .io_in_b  (_GEN ? _FP_mult_inst_1_io_out_s : 32'h0),
    .io_out_s (_FP_adder_Inst_0_io_out_s)
  );
  FP_add_32_13 FP_adder_Inst_1 (
    .clock    (clock),
    .io_in_en (_GEN),
    .io_in_a  (_GEN ? _FP_mult_inst_2_io_out_s ^ 32'h80000000 : 32'h0),
    .io_in_b  (_GEN ? _FP_mult_inst_3_io_out_s : 32'h0),
    .io_out_s (_FP_adder_Inst_1_io_out_s)
  );
  assign io_out_s = {_FP_adder_Inst_0_io_out_s, _FP_adder_Inst_1_io_out_s};
endmodule

module complex_adder(
  input         clock,
  input  [63:0] io_complexA,
                io_complexB,
  input         io_in_en,
  output [63:0] io_out_s
);

  wire [31:0] _FP_adder_Inst_1_io_out_s;
  wire [31:0] _FP_adder_Inst_0_io_out_s;
  FP_add_32_13 FP_adder_Inst_0 (
    .clock    (clock),
    .io_in_en (io_in_en),
    .io_in_a  (io_complexA[63:32]),
    .io_in_b  (io_complexB[63:32]),
    .io_out_s (_FP_adder_Inst_0_io_out_s)
  );
  FP_add_32_13 FP_adder_Inst_1 (
    .clock    (clock),
    .io_in_en (io_in_en),
    .io_in_a  (io_complexA[31:0]),
    .io_in_b  (io_complexB[31:0]),
    .io_out_s (_FP_adder_Inst_1_io_out_s)
  );
  assign io_out_s = {_FP_adder_Inst_0_io_out_s, _FP_adder_Inst_1_io_out_s};
endmodule

module complex_dot_streaming(
  input         clock,
                reset,
  input  [63:0] io_vec_a_0,
                io_vec_a_1,
                io_vec_b_0,
                io_vec_b_1,
  input         io_in_en,
  output [63:0] io_out_s
);

  wire [63:0] _adderInst_io_out_s;
  wire [63:0] _MultInst_1_io_out_s;
  wire [63:0] _MultInst_io_out_s;
  complex_conjugate_mult MultInst (
    .clock       (clock),
    .reset       (reset),
    .io_complexA (io_vec_a_0),
    .io_complexB (io_vec_b_0),
    .io_in_en    (io_in_en),
    .io_out_s    (_MultInst_io_out_s)
  );
  complex_conjugate_mult MultInst_1 (
    .clock       (clock),
    .reset       (reset),
    .io_complexA (io_vec_a_1),
    .io_complexB (io_vec_b_1),
    .io_in_en    (io_in_en),
    .io_out_s    (_MultInst_1_io_out_s)
  );
  complex_adder adderInst (
    .clock       (clock),
    .io_complexA (_MultInst_io_out_s),
    .io_complexB (_MultInst_1_io_out_s),
    .io_in_en    (io_in_en),
    .io_out_s    (_adderInst_io_out_s)
  );
  assign io_out_s = io_in_en ? _adderInst_io_out_s : 64'h0;
endmodule

module demux(
  input  [63:0] io_input,
  input         io_sel,
  output [63:0] io_outputs_0,
                io_outputs_1
);

  assign io_outputs_0 = io_sel ? 64'h0 : io_input;
  assign io_outputs_1 = io_sel ? io_input : 64'h0;
endmodule

module complex_acc(
  input         clock,
                reset,
  input  [63:0] io_input,
  input         io_in_en,
  output [63:0] io_output
);

  wire [63:0] _demux1_io_outputs_0;
  wire [63:0] _demux1_io_outputs_1;
  reg  [31:0] counter;
  reg         adder_io_in_en_r;
  reg  [63:0] adder_io_complexA_r;
  always @(posedge clock) begin
    if (reset)
      counter <= 32'h0;
    else if (io_in_en)
      counter <= counter + 32'h1;
    adder_io_in_en_r <= io_in_en;
    adder_io_complexA_r <= _demux1_io_outputs_0;
  end // always @(posedge)
  demux demux1 (
    .io_input     (io_input),
    .io_sel       (counter[0]),
    .io_outputs_0 (_demux1_io_outputs_0),
    .io_outputs_1 (_demux1_io_outputs_1)
  );
  complex_adder adder (
    .clock       (clock),
    .io_complexA (adder_io_complexA_r),
    .io_complexB (_demux1_io_outputs_1),
    .io_in_en    (adder_io_in_en_r),
    .io_out_s    (io_output)
  );
endmodule

module complex_acc_1(
  input         clock,
                reset,
  input  [63:0] io_input,
  input         io_in_en,
  output [63:0] io_output
);

  wire [63:0] _demux1_io_outputs_0;
  wire [63:0] _demux1_io_outputs_1;
  reg  [31:0] counter;
  reg         adder_io_in_en_r;
  reg         adder_io_in_en_r_1;
  reg  [63:0] adder_io_complexA_r;
  reg  [63:0] adder_io_complexA_r_1;
  always @(posedge clock) begin
    if (reset)
      counter <= 32'h0;
    else if (io_in_en)
      counter <= counter + 32'h1;
    adder_io_in_en_r <= io_in_en;
    adder_io_in_en_r_1 <= adder_io_in_en_r;
    adder_io_complexA_r <= _demux1_io_outputs_0;
    adder_io_complexA_r_1 <= adder_io_complexA_r;
  end // always @(posedge)
  demux demux1 (
    .io_input     (io_input),
    .io_sel       (counter[1]),
    .io_outputs_0 (_demux1_io_outputs_0),
    .io_outputs_1 (_demux1_io_outputs_1)
  );
  complex_adder adder (
    .clock       (clock),
    .io_complexA (adder_io_complexA_r_1),
    .io_complexB (_demux1_io_outputs_1),
    .io_in_en    (adder_io_in_en_r_1),
    .io_out_s    (io_output)
  );
endmodule

module complex_acc_2(
  input         clock,
                reset,
  input  [63:0] io_input,
  input         io_in_en,
  output [63:0] io_output
);

  wire [63:0] _demux1_io_outputs_0;
  wire [63:0] _demux1_io_outputs_1;
  reg  [31:0] counter;
  reg         adder_io_in_en_r;
  reg         adder_io_in_en_r_1;
  reg         adder_io_in_en_r_2;
  reg         adder_io_in_en_r_3;
  reg  [63:0] adder_io_complexA_r;
  reg  [63:0] adder_io_complexA_r_1;
  reg  [63:0] adder_io_complexA_r_2;
  reg  [63:0] adder_io_complexA_r_3;
  always @(posedge clock) begin
    if (reset)
      counter <= 32'h0;
    else if (io_in_en)
      counter <= counter + 32'h1;
    adder_io_in_en_r <= io_in_en;
    adder_io_in_en_r_1 <= adder_io_in_en_r;
    adder_io_in_en_r_2 <= adder_io_in_en_r_1;
    adder_io_in_en_r_3 <= adder_io_in_en_r_2;
    adder_io_complexA_r <= _demux1_io_outputs_0;
    adder_io_complexA_r_1 <= adder_io_complexA_r;
    adder_io_complexA_r_2 <= adder_io_complexA_r_1;
    adder_io_complexA_r_3 <= adder_io_complexA_r_2;
  end // always @(posedge)
  demux demux1 (
    .io_input     (io_input),
    .io_sel       (counter[2]),
    .io_outputs_0 (_demux1_io_outputs_0),
    .io_outputs_1 (_demux1_io_outputs_1)
  );
  complex_adder adder (
    .clock       (clock),
    .io_complexA (adder_io_complexA_r_3),
    .io_complexB (_demux1_io_outputs_1),
    .io_in_en    (adder_io_in_en_r_3),
    .io_out_s    (io_output)
  );
endmodule

module complex_acc_3(
  input         clock,
                reset,
  input  [63:0] io_input,
  input         io_in_en,
  output [63:0] io_output
);

  wire [63:0] _demux1_io_outputs_0;
  wire [63:0] _demux1_io_outputs_1;
  reg  [31:0] counter;
  reg         adder_io_in_en_r;
  reg         adder_io_in_en_r_1;
  reg         adder_io_in_en_r_2;
  reg         adder_io_in_en_r_3;
  reg         adder_io_in_en_r_4;
  reg         adder_io_in_en_r_5;
  reg         adder_io_in_en_r_6;
  reg         adder_io_in_en_r_7;
  reg  [63:0] adder_io_complexA_r;
  reg  [63:0] adder_io_complexA_r_1;
  reg  [63:0] adder_io_complexA_r_2;
  reg  [63:0] adder_io_complexA_r_3;
  reg  [63:0] adder_io_complexA_r_4;
  reg  [63:0] adder_io_complexA_r_5;
  reg  [63:0] adder_io_complexA_r_6;
  reg  [63:0] adder_io_complexA_r_7;
  always @(posedge clock) begin
    if (reset)
      counter <= 32'h0;
    else if (io_in_en)
      counter <= counter + 32'h1;
    adder_io_in_en_r <= io_in_en;
    adder_io_in_en_r_1 <= adder_io_in_en_r;
    adder_io_in_en_r_2 <= adder_io_in_en_r_1;
    adder_io_in_en_r_3 <= adder_io_in_en_r_2;
    adder_io_in_en_r_4 <= adder_io_in_en_r_3;
    adder_io_in_en_r_5 <= adder_io_in_en_r_4;
    adder_io_in_en_r_6 <= adder_io_in_en_r_5;
    adder_io_in_en_r_7 <= adder_io_in_en_r_6;
    adder_io_complexA_r <= _demux1_io_outputs_0;
    adder_io_complexA_r_1 <= adder_io_complexA_r;
    adder_io_complexA_r_2 <= adder_io_complexA_r_1;
    adder_io_complexA_r_3 <= adder_io_complexA_r_2;
    adder_io_complexA_r_4 <= adder_io_complexA_r_3;
    adder_io_complexA_r_5 <= adder_io_complexA_r_4;
    adder_io_complexA_r_6 <= adder_io_complexA_r_5;
    adder_io_complexA_r_7 <= adder_io_complexA_r_6;
  end // always @(posedge)
  demux demux1 (
    .io_input     (io_input),
    .io_sel       (counter[3]),
    .io_outputs_0 (_demux1_io_outputs_0),
    .io_outputs_1 (_demux1_io_outputs_1)
  );
  complex_adder adder (
    .clock       (clock),
    .io_complexA (adder_io_complexA_r_7),
    .io_complexB (_demux1_io_outputs_1),
    .io_in_en    (adder_io_in_en_r_7),
    .io_out_s    (io_output)
  );
endmodule

module complex_acc_4(
  input         clock,
                reset,
  input  [63:0] io_input,
  input         io_in_en,
  output [63:0] io_output
);

  wire [63:0] _demux1_io_outputs_0;
  wire [63:0] _demux1_io_outputs_1;
  reg  [31:0] counter;
  reg         adder_io_in_en_r;
  reg         adder_io_in_en_r_1;
  reg         adder_io_in_en_r_2;
  reg         adder_io_in_en_r_3;
  reg         adder_io_in_en_r_4;
  reg         adder_io_in_en_r_5;
  reg         adder_io_in_en_r_6;
  reg         adder_io_in_en_r_7;
  reg         adder_io_in_en_r_8;
  reg         adder_io_in_en_r_9;
  reg         adder_io_in_en_r_10;
  reg         adder_io_in_en_r_11;
  reg         adder_io_in_en_r_12;
  reg         adder_io_in_en_r_13;
  reg         adder_io_in_en_r_14;
  reg         adder_io_in_en_r_15;
  reg  [63:0] adder_io_complexA_r;
  reg  [63:0] adder_io_complexA_r_1;
  reg  [63:0] adder_io_complexA_r_2;
  reg  [63:0] adder_io_complexA_r_3;
  reg  [63:0] adder_io_complexA_r_4;
  reg  [63:0] adder_io_complexA_r_5;
  reg  [63:0] adder_io_complexA_r_6;
  reg  [63:0] adder_io_complexA_r_7;
  reg  [63:0] adder_io_complexA_r_8;
  reg  [63:0] adder_io_complexA_r_9;
  reg  [63:0] adder_io_complexA_r_10;
  reg  [63:0] adder_io_complexA_r_11;
  reg  [63:0] adder_io_complexA_r_12;
  reg  [63:0] adder_io_complexA_r_13;
  reg  [63:0] adder_io_complexA_r_14;
  reg  [63:0] adder_io_complexA_r_15;
  always @(posedge clock) begin
    if (reset)
      counter <= 32'h0;
    else if (io_in_en)
      counter <= counter + 32'h1;
    adder_io_in_en_r <= io_in_en;
    adder_io_in_en_r_1 <= adder_io_in_en_r;
    adder_io_in_en_r_2 <= adder_io_in_en_r_1;
    adder_io_in_en_r_3 <= adder_io_in_en_r_2;
    adder_io_in_en_r_4 <= adder_io_in_en_r_3;
    adder_io_in_en_r_5 <= adder_io_in_en_r_4;
    adder_io_in_en_r_6 <= adder_io_in_en_r_5;
    adder_io_in_en_r_7 <= adder_io_in_en_r_6;
    adder_io_in_en_r_8 <= adder_io_in_en_r_7;
    adder_io_in_en_r_9 <= adder_io_in_en_r_8;
    adder_io_in_en_r_10 <= adder_io_in_en_r_9;
    adder_io_in_en_r_11 <= adder_io_in_en_r_10;
    adder_io_in_en_r_12 <= adder_io_in_en_r_11;
    adder_io_in_en_r_13 <= adder_io_in_en_r_12;
    adder_io_in_en_r_14 <= adder_io_in_en_r_13;
    adder_io_in_en_r_15 <= adder_io_in_en_r_14;
    adder_io_complexA_r <= _demux1_io_outputs_0;
    adder_io_complexA_r_1 <= adder_io_complexA_r;
    adder_io_complexA_r_2 <= adder_io_complexA_r_1;
    adder_io_complexA_r_3 <= adder_io_complexA_r_2;
    adder_io_complexA_r_4 <= adder_io_complexA_r_3;
    adder_io_complexA_r_5 <= adder_io_complexA_r_4;
    adder_io_complexA_r_6 <= adder_io_complexA_r_5;
    adder_io_complexA_r_7 <= adder_io_complexA_r_6;
    adder_io_complexA_r_8 <= adder_io_complexA_r_7;
    adder_io_complexA_r_9 <= adder_io_complexA_r_8;
    adder_io_complexA_r_10 <= adder_io_complexA_r_9;
    adder_io_complexA_r_11 <= adder_io_complexA_r_10;
    adder_io_complexA_r_12 <= adder_io_complexA_r_11;
    adder_io_complexA_r_13 <= adder_io_complexA_r_12;
    adder_io_complexA_r_14 <= adder_io_complexA_r_13;
    adder_io_complexA_r_15 <= adder_io_complexA_r_14;
  end // always @(posedge)
  demux demux1 (
    .io_input     (io_input),
    .io_sel       (counter[4]),
    .io_outputs_0 (_demux1_io_outputs_0),
    .io_outputs_1 (_demux1_io_outputs_1)
  );
  complex_adder adder (
    .clock       (clock),
    .io_complexA (adder_io_complexA_r_15),
    .io_complexB (_demux1_io_outputs_1),
    .io_in_en    (adder_io_in_en_r_15),
    .io_out_s    (io_output)
  );
endmodule

module complex_acc_5(
  input         clock,
                reset,
  input  [63:0] io_input,
  input         io_in_en,
  output [63:0] io_output
);

  wire [63:0] _demux1_io_outputs_0;
  wire [63:0] _demux1_io_outputs_1;
  reg  [31:0] counter;
  reg         adder_io_in_en_r;
  reg         adder_io_in_en_r_1;
  reg         adder_io_in_en_r_2;
  reg         adder_io_in_en_r_3;
  reg         adder_io_in_en_r_4;
  reg         adder_io_in_en_r_5;
  reg         adder_io_in_en_r_6;
  reg         adder_io_in_en_r_7;
  reg         adder_io_in_en_r_8;
  reg         adder_io_in_en_r_9;
  reg         adder_io_in_en_r_10;
  reg         adder_io_in_en_r_11;
  reg         adder_io_in_en_r_12;
  reg         adder_io_in_en_r_13;
  reg         adder_io_in_en_r_14;
  reg         adder_io_in_en_r_15;
  reg         adder_io_in_en_r_16;
  reg         adder_io_in_en_r_17;
  reg         adder_io_in_en_r_18;
  reg         adder_io_in_en_r_19;
  reg         adder_io_in_en_r_20;
  reg         adder_io_in_en_r_21;
  reg         adder_io_in_en_r_22;
  reg         adder_io_in_en_r_23;
  reg         adder_io_in_en_r_24;
  reg         adder_io_in_en_r_25;
  reg         adder_io_in_en_r_26;
  reg         adder_io_in_en_r_27;
  reg         adder_io_in_en_r_28;
  reg         adder_io_in_en_r_29;
  reg         adder_io_in_en_r_30;
  reg         adder_io_in_en_r_31;
  reg  [63:0] adder_io_complexA_r;
  reg  [63:0] adder_io_complexA_r_1;
  reg  [63:0] adder_io_complexA_r_2;
  reg  [63:0] adder_io_complexA_r_3;
  reg  [63:0] adder_io_complexA_r_4;
  reg  [63:0] adder_io_complexA_r_5;
  reg  [63:0] adder_io_complexA_r_6;
  reg  [63:0] adder_io_complexA_r_7;
  reg  [63:0] adder_io_complexA_r_8;
  reg  [63:0] adder_io_complexA_r_9;
  reg  [63:0] adder_io_complexA_r_10;
  reg  [63:0] adder_io_complexA_r_11;
  reg  [63:0] adder_io_complexA_r_12;
  reg  [63:0] adder_io_complexA_r_13;
  reg  [63:0] adder_io_complexA_r_14;
  reg  [63:0] adder_io_complexA_r_15;
  reg  [63:0] adder_io_complexA_r_16;
  reg  [63:0] adder_io_complexA_r_17;
  reg  [63:0] adder_io_complexA_r_18;
  reg  [63:0] adder_io_complexA_r_19;
  reg  [63:0] adder_io_complexA_r_20;
  reg  [63:0] adder_io_complexA_r_21;
  reg  [63:0] adder_io_complexA_r_22;
  reg  [63:0] adder_io_complexA_r_23;
  reg  [63:0] adder_io_complexA_r_24;
  reg  [63:0] adder_io_complexA_r_25;
  reg  [63:0] adder_io_complexA_r_26;
  reg  [63:0] adder_io_complexA_r_27;
  reg  [63:0] adder_io_complexA_r_28;
  reg  [63:0] adder_io_complexA_r_29;
  reg  [63:0] adder_io_complexA_r_30;
  reg  [63:0] adder_io_complexA_r_31;
  always @(posedge clock) begin
    if (reset)
      counter <= 32'h0;
    else if (io_in_en)
      counter <= counter + 32'h1;
    adder_io_in_en_r <= io_in_en;
    adder_io_in_en_r_1 <= adder_io_in_en_r;
    adder_io_in_en_r_2 <= adder_io_in_en_r_1;
    adder_io_in_en_r_3 <= adder_io_in_en_r_2;
    adder_io_in_en_r_4 <= adder_io_in_en_r_3;
    adder_io_in_en_r_5 <= adder_io_in_en_r_4;
    adder_io_in_en_r_6 <= adder_io_in_en_r_5;
    adder_io_in_en_r_7 <= adder_io_in_en_r_6;
    adder_io_in_en_r_8 <= adder_io_in_en_r_7;
    adder_io_in_en_r_9 <= adder_io_in_en_r_8;
    adder_io_in_en_r_10 <= adder_io_in_en_r_9;
    adder_io_in_en_r_11 <= adder_io_in_en_r_10;
    adder_io_in_en_r_12 <= adder_io_in_en_r_11;
    adder_io_in_en_r_13 <= adder_io_in_en_r_12;
    adder_io_in_en_r_14 <= adder_io_in_en_r_13;
    adder_io_in_en_r_15 <= adder_io_in_en_r_14;
    adder_io_in_en_r_16 <= adder_io_in_en_r_15;
    adder_io_in_en_r_17 <= adder_io_in_en_r_16;
    adder_io_in_en_r_18 <= adder_io_in_en_r_17;
    adder_io_in_en_r_19 <= adder_io_in_en_r_18;
    adder_io_in_en_r_20 <= adder_io_in_en_r_19;
    adder_io_in_en_r_21 <= adder_io_in_en_r_20;
    adder_io_in_en_r_22 <= adder_io_in_en_r_21;
    adder_io_in_en_r_23 <= adder_io_in_en_r_22;
    adder_io_in_en_r_24 <= adder_io_in_en_r_23;
    adder_io_in_en_r_25 <= adder_io_in_en_r_24;
    adder_io_in_en_r_26 <= adder_io_in_en_r_25;
    adder_io_in_en_r_27 <= adder_io_in_en_r_26;
    adder_io_in_en_r_28 <= adder_io_in_en_r_27;
    adder_io_in_en_r_29 <= adder_io_in_en_r_28;
    adder_io_in_en_r_30 <= adder_io_in_en_r_29;
    adder_io_in_en_r_31 <= adder_io_in_en_r_30;
    adder_io_complexA_r <= _demux1_io_outputs_0;
    adder_io_complexA_r_1 <= adder_io_complexA_r;
    adder_io_complexA_r_2 <= adder_io_complexA_r_1;
    adder_io_complexA_r_3 <= adder_io_complexA_r_2;
    adder_io_complexA_r_4 <= adder_io_complexA_r_3;
    adder_io_complexA_r_5 <= adder_io_complexA_r_4;
    adder_io_complexA_r_6 <= adder_io_complexA_r_5;
    adder_io_complexA_r_7 <= adder_io_complexA_r_6;
    adder_io_complexA_r_8 <= adder_io_complexA_r_7;
    adder_io_complexA_r_9 <= adder_io_complexA_r_8;
    adder_io_complexA_r_10 <= adder_io_complexA_r_9;
    adder_io_complexA_r_11 <= adder_io_complexA_r_10;
    adder_io_complexA_r_12 <= adder_io_complexA_r_11;
    adder_io_complexA_r_13 <= adder_io_complexA_r_12;
    adder_io_complexA_r_14 <= adder_io_complexA_r_13;
    adder_io_complexA_r_15 <= adder_io_complexA_r_14;
    adder_io_complexA_r_16 <= adder_io_complexA_r_15;
    adder_io_complexA_r_17 <= adder_io_complexA_r_16;
    adder_io_complexA_r_18 <= adder_io_complexA_r_17;
    adder_io_complexA_r_19 <= adder_io_complexA_r_18;
    adder_io_complexA_r_20 <= adder_io_complexA_r_19;
    adder_io_complexA_r_21 <= adder_io_complexA_r_20;
    adder_io_complexA_r_22 <= adder_io_complexA_r_21;
    adder_io_complexA_r_23 <= adder_io_complexA_r_22;
    adder_io_complexA_r_24 <= adder_io_complexA_r_23;
    adder_io_complexA_r_25 <= adder_io_complexA_r_24;
    adder_io_complexA_r_26 <= adder_io_complexA_r_25;
    adder_io_complexA_r_27 <= adder_io_complexA_r_26;
    adder_io_complexA_r_28 <= adder_io_complexA_r_27;
    adder_io_complexA_r_29 <= adder_io_complexA_r_28;
    adder_io_complexA_r_30 <= adder_io_complexA_r_29;
    adder_io_complexA_r_31 <= adder_io_complexA_r_30;
  end // always @(posedge)
  demux demux1 (
    .io_input     (io_input),
    .io_sel       (counter[5]),
    .io_outputs_0 (_demux1_io_outputs_0),
    .io_outputs_1 (_demux1_io_outputs_1)
  );
  complex_adder adder (
    .clock       (clock),
    .io_complexA (adder_io_complexA_r_31),
    .io_complexB (_demux1_io_outputs_1),
    .io_in_en    (adder_io_in_en_r_31),
    .io_out_s    (io_output)
  );
endmodule

module complex_dot_iterative(
  input         clock,
                reset,
  input  [63:0] io_vec_a_0,
                io_vec_a_1,
                io_vec_a_2,
                io_vec_a_3,
                io_vec_a_4,
                io_vec_a_5,
                io_vec_a_6,
                io_vec_a_7,
                io_vec_a_8,
                io_vec_a_9,
                io_vec_a_10,
                io_vec_a_11,
                io_vec_a_12,
                io_vec_a_13,
                io_vec_a_14,
                io_vec_a_15,
                io_vec_a_16,
                io_vec_a_17,
                io_vec_a_18,
                io_vec_a_19,
                io_vec_a_20,
                io_vec_a_21,
                io_vec_a_22,
                io_vec_a_23,
                io_vec_a_24,
                io_vec_a_25,
                io_vec_a_26,
                io_vec_a_27,
                io_vec_a_28,
                io_vec_a_29,
                io_vec_a_30,
                io_vec_a_31,
                io_vec_a_32,
                io_vec_a_33,
                io_vec_a_34,
                io_vec_a_35,
                io_vec_a_36,
                io_vec_a_37,
                io_vec_a_38,
                io_vec_a_39,
                io_vec_a_40,
                io_vec_a_41,
                io_vec_a_42,
                io_vec_a_43,
                io_vec_a_44,
                io_vec_a_45,
                io_vec_a_46,
                io_vec_a_47,
                io_vec_a_48,
                io_vec_a_49,
                io_vec_a_50,
                io_vec_a_51,
                io_vec_a_52,
                io_vec_a_53,
                io_vec_a_54,
                io_vec_a_55,
                io_vec_a_56,
                io_vec_a_57,
                io_vec_a_58,
                io_vec_a_59,
                io_vec_a_60,
                io_vec_a_61,
                io_vec_a_62,
                io_vec_a_63,
                io_vec_a_64,
                io_vec_a_65,
                io_vec_a_66,
                io_vec_a_67,
                io_vec_a_68,
                io_vec_a_69,
                io_vec_a_70,
                io_vec_a_71,
                io_vec_a_72,
                io_vec_a_73,
                io_vec_a_74,
                io_vec_a_75,
                io_vec_a_76,
                io_vec_a_77,
                io_vec_a_78,
                io_vec_a_79,
                io_vec_a_80,
                io_vec_a_81,
                io_vec_a_82,
                io_vec_a_83,
                io_vec_a_84,
                io_vec_a_85,
                io_vec_a_86,
                io_vec_a_87,
                io_vec_a_88,
                io_vec_a_89,
                io_vec_a_90,
                io_vec_a_91,
                io_vec_a_92,
                io_vec_a_93,
                io_vec_a_94,
                io_vec_a_95,
                io_vec_a_96,
                io_vec_a_97,
                io_vec_a_98,
                io_vec_a_99,
                io_vec_a_100,
                io_vec_a_101,
                io_vec_a_102,
                io_vec_a_103,
                io_vec_a_104,
                io_vec_a_105,
                io_vec_a_106,
                io_vec_a_107,
                io_vec_a_108,
                io_vec_a_109,
                io_vec_a_110,
                io_vec_a_111,
                io_vec_a_112,
                io_vec_a_113,
                io_vec_a_114,
                io_vec_a_115,
                io_vec_a_116,
                io_vec_a_117,
                io_vec_a_118,
                io_vec_a_119,
                io_vec_a_120,
                io_vec_a_121,
                io_vec_a_122,
                io_vec_a_123,
                io_vec_a_124,
                io_vec_a_125,
                io_vec_a_126,
                io_vec_a_127,
                io_vec_b_0,
                io_vec_b_1,
                io_vec_b_2,
                io_vec_b_3,
                io_vec_b_4,
                io_vec_b_5,
                io_vec_b_6,
                io_vec_b_7,
                io_vec_b_8,
                io_vec_b_9,
                io_vec_b_10,
                io_vec_b_11,
                io_vec_b_12,
                io_vec_b_13,
                io_vec_b_14,
                io_vec_b_15,
                io_vec_b_16,
                io_vec_b_17,
                io_vec_b_18,
                io_vec_b_19,
                io_vec_b_20,
                io_vec_b_21,
                io_vec_b_22,
                io_vec_b_23,
                io_vec_b_24,
                io_vec_b_25,
                io_vec_b_26,
                io_vec_b_27,
                io_vec_b_28,
                io_vec_b_29,
                io_vec_b_30,
                io_vec_b_31,
                io_vec_b_32,
                io_vec_b_33,
                io_vec_b_34,
                io_vec_b_35,
                io_vec_b_36,
                io_vec_b_37,
                io_vec_b_38,
                io_vec_b_39,
                io_vec_b_40,
                io_vec_b_41,
                io_vec_b_42,
                io_vec_b_43,
                io_vec_b_44,
                io_vec_b_45,
                io_vec_b_46,
                io_vec_b_47,
                io_vec_b_48,
                io_vec_b_49,
                io_vec_b_50,
                io_vec_b_51,
                io_vec_b_52,
                io_vec_b_53,
                io_vec_b_54,
                io_vec_b_55,
                io_vec_b_56,
                io_vec_b_57,
                io_vec_b_58,
                io_vec_b_59,
                io_vec_b_60,
                io_vec_b_61,
                io_vec_b_62,
                io_vec_b_63,
                io_vec_b_64,
                io_vec_b_65,
                io_vec_b_66,
                io_vec_b_67,
                io_vec_b_68,
                io_vec_b_69,
                io_vec_b_70,
                io_vec_b_71,
                io_vec_b_72,
                io_vec_b_73,
                io_vec_b_74,
                io_vec_b_75,
                io_vec_b_76,
                io_vec_b_77,
                io_vec_b_78,
                io_vec_b_79,
                io_vec_b_80,
                io_vec_b_81,
                io_vec_b_82,
                io_vec_b_83,
                io_vec_b_84,
                io_vec_b_85,
                io_vec_b_86,
                io_vec_b_87,
                io_vec_b_88,
                io_vec_b_89,
                io_vec_b_90,
                io_vec_b_91,
                io_vec_b_92,
                io_vec_b_93,
                io_vec_b_94,
                io_vec_b_95,
                io_vec_b_96,
                io_vec_b_97,
                io_vec_b_98,
                io_vec_b_99,
                io_vec_b_100,
                io_vec_b_101,
                io_vec_b_102,
                io_vec_b_103,
                io_vec_b_104,
                io_vec_b_105,
                io_vec_b_106,
                io_vec_b_107,
                io_vec_b_108,
                io_vec_b_109,
                io_vec_b_110,
                io_vec_b_111,
                io_vec_b_112,
                io_vec_b_113,
                io_vec_b_114,
                io_vec_b_115,
                io_vec_b_116,
                io_vec_b_117,
                io_vec_b_118,
                io_vec_b_119,
                io_vec_b_120,
                io_vec_b_121,
                io_vec_b_122,
                io_vec_b_123,
                io_vec_b_124,
                io_vec_b_125,
                io_vec_b_126,
                io_vec_b_127,
  input         io_in_en,
                io_in_valid,
  output        io_out_valid,
  output [31:0] io_out_real,
                io_out_imag,
  output [63:0] io_out_s
);

  wire [63:0]        _d2aInst_5_io_output;
  wire [63:0]        _d2aInst_4_io_output;
  wire [63:0]        _d2aInst_3_io_output;
  wire [63:0]        _d2aInst_2_io_output;
  wire [63:0]        _d2aInst_1_io_output;
  wire [63:0]        _d2aInst_0_io_output;
  wire [63:0]        _complex_dot_io_out_s;
  reg  [31:0]        counter;
  reg  [5:0]         index;
  wire [6:0]         _VecB_batch_0_T = {index, 1'h0};
  wire [127:0][63:0] _GEN =
    {{io_vec_a_127},
     {io_vec_a_126},
     {io_vec_a_125},
     {io_vec_a_124},
     {io_vec_a_123},
     {io_vec_a_122},
     {io_vec_a_121},
     {io_vec_a_120},
     {io_vec_a_119},
     {io_vec_a_118},
     {io_vec_a_117},
     {io_vec_a_116},
     {io_vec_a_115},
     {io_vec_a_114},
     {io_vec_a_113},
     {io_vec_a_112},
     {io_vec_a_111},
     {io_vec_a_110},
     {io_vec_a_109},
     {io_vec_a_108},
     {io_vec_a_107},
     {io_vec_a_106},
     {io_vec_a_105},
     {io_vec_a_104},
     {io_vec_a_103},
     {io_vec_a_102},
     {io_vec_a_101},
     {io_vec_a_100},
     {io_vec_a_99},
     {io_vec_a_98},
     {io_vec_a_97},
     {io_vec_a_96},
     {io_vec_a_95},
     {io_vec_a_94},
     {io_vec_a_93},
     {io_vec_a_92},
     {io_vec_a_91},
     {io_vec_a_90},
     {io_vec_a_89},
     {io_vec_a_88},
     {io_vec_a_87},
     {io_vec_a_86},
     {io_vec_a_85},
     {io_vec_a_84},
     {io_vec_a_83},
     {io_vec_a_82},
     {io_vec_a_81},
     {io_vec_a_80},
     {io_vec_a_79},
     {io_vec_a_78},
     {io_vec_a_77},
     {io_vec_a_76},
     {io_vec_a_75},
     {io_vec_a_74},
     {io_vec_a_73},
     {io_vec_a_72},
     {io_vec_a_71},
     {io_vec_a_70},
     {io_vec_a_69},
     {io_vec_a_68},
     {io_vec_a_67},
     {io_vec_a_66},
     {io_vec_a_65},
     {io_vec_a_64},
     {io_vec_a_63},
     {io_vec_a_62},
     {io_vec_a_61},
     {io_vec_a_60},
     {io_vec_a_59},
     {io_vec_a_58},
     {io_vec_a_57},
     {io_vec_a_56},
     {io_vec_a_55},
     {io_vec_a_54},
     {io_vec_a_53},
     {io_vec_a_52},
     {io_vec_a_51},
     {io_vec_a_50},
     {io_vec_a_49},
     {io_vec_a_48},
     {io_vec_a_47},
     {io_vec_a_46},
     {io_vec_a_45},
     {io_vec_a_44},
     {io_vec_a_43},
     {io_vec_a_42},
     {io_vec_a_41},
     {io_vec_a_40},
     {io_vec_a_39},
     {io_vec_a_38},
     {io_vec_a_37},
     {io_vec_a_36},
     {io_vec_a_35},
     {io_vec_a_34},
     {io_vec_a_33},
     {io_vec_a_32},
     {io_vec_a_31},
     {io_vec_a_30},
     {io_vec_a_29},
     {io_vec_a_28},
     {io_vec_a_27},
     {io_vec_a_26},
     {io_vec_a_25},
     {io_vec_a_24},
     {io_vec_a_23},
     {io_vec_a_22},
     {io_vec_a_21},
     {io_vec_a_20},
     {io_vec_a_19},
     {io_vec_a_18},
     {io_vec_a_17},
     {io_vec_a_16},
     {io_vec_a_15},
     {io_vec_a_14},
     {io_vec_a_13},
     {io_vec_a_12},
     {io_vec_a_11},
     {io_vec_a_10},
     {io_vec_a_9},
     {io_vec_a_8},
     {io_vec_a_7},
     {io_vec_a_6},
     {io_vec_a_5},
     {io_vec_a_4},
     {io_vec_a_3},
     {io_vec_a_2},
     {io_vec_a_1},
     {io_vec_a_0}};
  wire [127:0][63:0] _GEN_0 =
    {{io_vec_b_127},
     {io_vec_b_126},
     {io_vec_b_125},
     {io_vec_b_124},
     {io_vec_b_123},
     {io_vec_b_122},
     {io_vec_b_121},
     {io_vec_b_120},
     {io_vec_b_119},
     {io_vec_b_118},
     {io_vec_b_117},
     {io_vec_b_116},
     {io_vec_b_115},
     {io_vec_b_114},
     {io_vec_b_113},
     {io_vec_b_112},
     {io_vec_b_111},
     {io_vec_b_110},
     {io_vec_b_109},
     {io_vec_b_108},
     {io_vec_b_107},
     {io_vec_b_106},
     {io_vec_b_105},
     {io_vec_b_104},
     {io_vec_b_103},
     {io_vec_b_102},
     {io_vec_b_101},
     {io_vec_b_100},
     {io_vec_b_99},
     {io_vec_b_98},
     {io_vec_b_97},
     {io_vec_b_96},
     {io_vec_b_95},
     {io_vec_b_94},
     {io_vec_b_93},
     {io_vec_b_92},
     {io_vec_b_91},
     {io_vec_b_90},
     {io_vec_b_89},
     {io_vec_b_88},
     {io_vec_b_87},
     {io_vec_b_86},
     {io_vec_b_85},
     {io_vec_b_84},
     {io_vec_b_83},
     {io_vec_b_82},
     {io_vec_b_81},
     {io_vec_b_80},
     {io_vec_b_79},
     {io_vec_b_78},
     {io_vec_b_77},
     {io_vec_b_76},
     {io_vec_b_75},
     {io_vec_b_74},
     {io_vec_b_73},
     {io_vec_b_72},
     {io_vec_b_71},
     {io_vec_b_70},
     {io_vec_b_69},
     {io_vec_b_68},
     {io_vec_b_67},
     {io_vec_b_66},
     {io_vec_b_65},
     {io_vec_b_64},
     {io_vec_b_63},
     {io_vec_b_62},
     {io_vec_b_61},
     {io_vec_b_60},
     {io_vec_b_59},
     {io_vec_b_58},
     {io_vec_b_57},
     {io_vec_b_56},
     {io_vec_b_55},
     {io_vec_b_54},
     {io_vec_b_53},
     {io_vec_b_52},
     {io_vec_b_51},
     {io_vec_b_50},
     {io_vec_b_49},
     {io_vec_b_48},
     {io_vec_b_47},
     {io_vec_b_46},
     {io_vec_b_45},
     {io_vec_b_44},
     {io_vec_b_43},
     {io_vec_b_42},
     {io_vec_b_41},
     {io_vec_b_40},
     {io_vec_b_39},
     {io_vec_b_38},
     {io_vec_b_37},
     {io_vec_b_36},
     {io_vec_b_35},
     {io_vec_b_34},
     {io_vec_b_33},
     {io_vec_b_32},
     {io_vec_b_31},
     {io_vec_b_30},
     {io_vec_b_29},
     {io_vec_b_28},
     {io_vec_b_27},
     {io_vec_b_26},
     {io_vec_b_25},
     {io_vec_b_24},
     {io_vec_b_23},
     {io_vec_b_22},
     {io_vec_b_21},
     {io_vec_b_20},
     {io_vec_b_19},
     {io_vec_b_18},
     {io_vec_b_17},
     {io_vec_b_16},
     {io_vec_b_15},
     {io_vec_b_14},
     {io_vec_b_13},
     {io_vec_b_12},
     {io_vec_b_11},
     {io_vec_b_10},
     {io_vec_b_9},
     {io_vec_b_8},
     {io_vec_b_7},
     {io_vec_b_6},
     {io_vec_b_5},
     {io_vec_b_4},
     {io_vec_b_3},
     {io_vec_b_2},
     {io_vec_b_1},
     {io_vec_b_0}};
  wire [6:0]         _batch_index_T_3 = {index, 1'h0} + 7'h1;
  reg                io_out_valid_r;
  reg                io_out_valid_r_1;
  reg                io_out_valid_r_2;
  reg                io_out_valid_r_3;
  reg                io_out_valid_r_4;
  reg                io_out_valid_r_5;
  reg                io_out_valid_r_6;
  reg                io_out_valid_r_7;
  reg                io_out_valid_r_8;
  reg                io_out_valid_r_9;
  reg                io_out_valid_r_10;
  reg                io_out_valid_r_11;
  reg                io_out_valid_r_12;
  reg                io_out_valid_r_13;
  reg                io_out_valid_r_14;
  reg                io_out_valid_r_15;
  reg                io_out_valid_r_16;
  reg                io_out_valid_r_17;
  reg                io_out_valid_r_18;
  reg                io_out_valid_r_19;
  reg                io_out_valid_r_20;
  reg                io_out_valid_r_21;
  reg                io_out_valid_r_22;
  reg                io_out_valid_r_23;
  reg                io_out_valid_r_24;
  reg                io_out_valid_r_25;
  reg                io_out_valid_r_26;
  reg                io_out_valid_r_27;
  reg                io_out_valid_r_28;
  reg                io_out_valid_r_29;
  reg                io_out_valid_r_30;
  reg                io_out_valid_r_31;
  reg                io_out_valid_r_32;
  reg                io_out_valid_r_33;
  reg                io_out_valid_r_34;
  reg                io_out_valid_r_35;
  reg                io_out_valid_r_36;
  reg                io_out_valid_r_37;
  reg                io_out_valid_r_38;
  reg                io_out_valid_r_39;
  reg                io_out_valid_r_40;
  reg                io_out_valid_r_41;
  reg                io_out_valid_r_42;
  reg                io_out_valid_r_43;
  reg                io_out_valid_r_44;
  reg                io_out_valid_r_45;
  reg                io_out_valid_r_46;
  reg                io_out_valid_r_47;
  reg                io_out_valid_r_48;
  reg                io_out_valid_r_49;
  reg                io_out_valid_r_50;
  reg                io_out_valid_r_51;
  reg                io_out_valid_r_52;
  reg                io_out_valid_r_53;
  reg                io_out_valid_r_54;
  reg                io_out_valid_r_55;
  reg                io_out_valid_r_56;
  reg                io_out_valid_r_57;
  reg                io_out_valid_r_58;
  reg                io_out_valid_r_59;
  reg                io_out_valid_r_60;
  reg                io_out_valid_r_61;
  reg                io_out_valid_r_62;
  reg                io_out_valid_r_63;
  reg                io_out_valid_r_64;
  reg                io_out_valid_r_65;
  reg                io_out_valid_r_66;
  reg                io_out_valid_r_67;
  reg                io_out_valid_r_68;
  reg                io_out_valid_r_69;
  reg                io_out_valid_r_70;
  reg                io_out_valid_r_71;
  reg                io_out_valid_r_72;
  reg                io_out_valid_r_73;
  reg                io_out_valid_r_74;
  reg                io_out_valid_r_75;
  reg                io_out_valid_r_76;
  reg                io_out_valid_r_77;
  reg                io_out_valid_r_78;
  reg                io_out_valid_r_79;
  reg                io_out_valid_r_80;
  reg                io_out_valid_r_81;
  reg                io_out_valid_r_82;
  reg                io_out_valid_r_83;
  reg                io_out_valid_r_84;
  reg                io_out_valid_r_85;
  reg                io_out_valid_r_86;
  reg                io_out_valid_r_87;
  reg                io_out_valid_r_88;
  reg                io_out_valid_r_89;
  reg                io_out_valid_r_90;
  reg                io_out_valid_r_91;
  reg                io_out_valid_r_92;
  reg                io_out_valid_r_93;
  reg                io_out_valid_r_94;
  reg                io_out_valid_r_95;
  reg                io_out_valid_r_96;
  reg                io_out_valid_r_97;
  reg                io_out_valid_r_98;
  reg                io_out_valid_r_99;
  reg                io_out_valid_r_100;
  reg                io_out_valid_r_101;
  reg                io_out_valid_r_102;
  reg                io_out_valid_r_103;
  reg                io_out_valid_r_104;
  reg                io_out_valid_r_105;
  reg                io_out_valid_r_106;
  reg                io_out_valid_r_107;
  reg                io_out_valid_r_108;
  reg                io_out_valid_r_109;
  reg                io_out_valid_r_110;
  reg                io_out_valid_r_111;
  reg                io_out_valid_r_112;
  reg                io_out_valid_r_113;
  reg                io_out_valid_r_114;
  reg                io_out_valid_r_115;
  reg                io_out_valid_r_116;
  reg                io_out_valid_r_117;
  reg                io_out_valid_r_118;
  reg                io_out_valid_r_119;
  reg                io_out_valid_r_120;
  reg                io_out_valid_r_121;
  reg                io_out_valid_r_122;
  reg                io_out_valid_r_123;
  reg                io_out_valid_r_124;
  reg                io_out_valid_r_125;
  reg                io_out_valid_r_126;
  reg                io_out_valid_r_127;
  reg                io_out_valid_r_128;
  reg                io_out_valid_r_129;
  reg                io_out_valid_r_130;
  reg                io_out_valid_r_131;
  reg                io_out_valid_r_132;
  reg                io_out_valid_r_133;
  reg                io_out_valid_r_134;
  reg                io_out_valid_r_135;
  reg                io_out_valid_r_136;
  reg                io_out_valid_r_137;
  reg                io_out_valid_r_138;
  reg                io_out_valid_r_139;
  reg                io_out_valid_r_140;
  reg                io_out_valid_r_141;
  reg                io_out_valid_r_142;
  reg                io_out_valid_r_143;
  reg                io_out_valid_r_144;
  reg                io_out_valid_r_145;
  reg                io_out_valid_r_146;
  reg                io_out_valid_r_147;
  reg                io_out_valid_r_148;
  reg                io_out_valid_r_149;
  reg                io_out_valid_r_150;
  reg                io_out_valid_r_151;
  reg                io_out_valid_r_152;
  reg                io_out_valid_r_153;
  reg                io_out_valid_r_154;
  reg                io_out_valid_r_155;
  reg                io_out_valid_r_156;
  reg                io_out_valid_r_157;
  reg                io_out_valid_r_158;
  reg                io_out_valid_r_159;
  reg                io_out_valid_r_160;
  reg                io_out_valid_r_161;
  reg                io_out_valid_r_162;
  reg                io_out_valid_r_163;
  reg                io_out_valid_r_164;
  reg                io_out_valid_r_165;
  reg                io_out_valid_r_166;
  reg                io_out_valid_r_167;
  reg                io_out_valid_r_168;
  reg                io_out_valid_r_169;
  reg                io_out_valid_r_170;
  reg                io_out_valid_r_171;
  reg                io_out_valid_r_172;
  reg                io_out_valid_r_173;
  reg                io_out_valid_r_174;
  reg                io_out_valid_r_175;
  reg                io_out_valid_r_176;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if ((`PRINTF_COND_) & ~reset) begin
        $fwrite(32'h80000002, "Counter: %d\n", counter);
        $fwrite(32'h80000002, "Dot Input VecA :[0] %d\n", _GEN[_VecB_batch_0_T]);
        $fwrite(32'h80000002, "Dot Input VecA :[1] %d\n", _GEN[_batch_index_T_3]);
        $fwrite(32'h80000002, "Dot Input VecB :[0] %d\n", _GEN_0[_VecB_batch_0_T]);
        $fwrite(32'h80000002, "Dot Input VecB :[1] %d\n", _GEN_0[_batch_index_T_3]);
        $fwrite(32'h80000002, "Dot Product Output: %d\n", _complex_dot_io_out_s);
        $fwrite(32'h80000002, "acc_Input: %d, acc_Output: %d\n", _complex_dot_io_out_s,
                _d2aInst_0_io_output);
        $fwrite(32'h80000002, "acc_Input: %d, acc_Output: %d\n", _d2aInst_0_io_output,
                _d2aInst_1_io_output);
        $fwrite(32'h80000002, "acc_Input: %d, acc_Output: %d\n", _d2aInst_1_io_output,
                _d2aInst_2_io_output);
        $fwrite(32'h80000002, "acc_Input: %d, acc_Output: %d\n", _d2aInst_2_io_output,
                _d2aInst_3_io_output);
        $fwrite(32'h80000002, "acc_Input: %d, acc_Output: %d\n", _d2aInst_3_io_output,
                _d2aInst_4_io_output);
        $fwrite(32'h80000002, "acc_Input: %d, acc_Output: %d\n", _d2aInst_4_io_output,
                _d2aInst_5_io_output);
        $fwrite(32'h80000002, "Final_Out: %d\n", _d2aInst_5_io_output);
        $fwrite(32'h80000002, "Real_Out: %d\n", _d2aInst_5_io_output[63:32]);
        $fwrite(32'h80000002, "Imag_Out: %d\n", _d2aInst_5_io_output[31:0]);
        $fwrite(32'h80000002, "\n");
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    if (reset) begin
      counter <= 32'h0;
      index <= 6'h0;
    end
    else begin
      if (io_in_en & counter < 32'hB1)
        counter <= counter + 32'h1;
      index <= index + 6'h1;
    end
    if (io_in_en) begin
      io_out_valid_r <= io_in_valid;
      io_out_valid_r_1 <= io_out_valid_r;
      io_out_valid_r_2 <= io_out_valid_r_1;
      io_out_valid_r_3 <= io_out_valid_r_2;
      io_out_valid_r_4 <= io_out_valid_r_3;
      io_out_valid_r_5 <= io_out_valid_r_4;
      io_out_valid_r_6 <= io_out_valid_r_5;
      io_out_valid_r_7 <= io_out_valid_r_6;
      io_out_valid_r_8 <= io_out_valid_r_7;
      io_out_valid_r_9 <= io_out_valid_r_8;
      io_out_valid_r_10 <= io_out_valid_r_9;
      io_out_valid_r_11 <= io_out_valid_r_10;
      io_out_valid_r_12 <= io_out_valid_r_11;
      io_out_valid_r_13 <= io_out_valid_r_12;
      io_out_valid_r_14 <= io_out_valid_r_13;
      io_out_valid_r_15 <= io_out_valid_r_14;
      io_out_valid_r_16 <= io_out_valid_r_15;
      io_out_valid_r_17 <= io_out_valid_r_16;
      io_out_valid_r_18 <= io_out_valid_r_17;
      io_out_valid_r_19 <= io_out_valid_r_18;
      io_out_valid_r_20 <= io_out_valid_r_19;
      io_out_valid_r_21 <= io_out_valid_r_20;
      io_out_valid_r_22 <= io_out_valid_r_21;
      io_out_valid_r_23 <= io_out_valid_r_22;
      io_out_valid_r_24 <= io_out_valid_r_23;
      io_out_valid_r_25 <= io_out_valid_r_24;
      io_out_valid_r_26 <= io_out_valid_r_25;
      io_out_valid_r_27 <= io_out_valid_r_26;
      io_out_valid_r_28 <= io_out_valid_r_27;
      io_out_valid_r_29 <= io_out_valid_r_28;
      io_out_valid_r_30 <= io_out_valid_r_29;
      io_out_valid_r_31 <= io_out_valid_r_30;
      io_out_valid_r_32 <= io_out_valid_r_31;
      io_out_valid_r_33 <= io_out_valid_r_32;
      io_out_valid_r_34 <= io_out_valid_r_33;
      io_out_valid_r_35 <= io_out_valid_r_34;
      io_out_valid_r_36 <= io_out_valid_r_35;
      io_out_valid_r_37 <= io_out_valid_r_36;
      io_out_valid_r_38 <= io_out_valid_r_37;
      io_out_valid_r_39 <= io_out_valid_r_38;
      io_out_valid_r_40 <= io_out_valid_r_39;
      io_out_valid_r_41 <= io_out_valid_r_40;
      io_out_valid_r_42 <= io_out_valid_r_41;
      io_out_valid_r_43 <= io_out_valid_r_42;
      io_out_valid_r_44 <= io_out_valid_r_43;
      io_out_valid_r_45 <= io_out_valid_r_44;
      io_out_valid_r_46 <= io_out_valid_r_45;
      io_out_valid_r_47 <= io_out_valid_r_46;
      io_out_valid_r_48 <= io_out_valid_r_47;
      io_out_valid_r_49 <= io_out_valid_r_48;
      io_out_valid_r_50 <= io_out_valid_r_49;
      io_out_valid_r_51 <= io_out_valid_r_50;
      io_out_valid_r_52 <= io_out_valid_r_51;
      io_out_valid_r_53 <= io_out_valid_r_52;
      io_out_valid_r_54 <= io_out_valid_r_53;
      io_out_valid_r_55 <= io_out_valid_r_54;
      io_out_valid_r_56 <= io_out_valid_r_55;
      io_out_valid_r_57 <= io_out_valid_r_56;
      io_out_valid_r_58 <= io_out_valid_r_57;
      io_out_valid_r_59 <= io_out_valid_r_58;
      io_out_valid_r_60 <= io_out_valid_r_59;
      io_out_valid_r_61 <= io_out_valid_r_60;
      io_out_valid_r_62 <= io_out_valid_r_61;
      io_out_valid_r_63 <= io_out_valid_r_62;
      io_out_valid_r_64 <= io_out_valid_r_63;
      io_out_valid_r_65 <= io_out_valid_r_64;
      io_out_valid_r_66 <= io_out_valid_r_65;
      io_out_valid_r_67 <= io_out_valid_r_66;
      io_out_valid_r_68 <= io_out_valid_r_67;
      io_out_valid_r_69 <= io_out_valid_r_68;
      io_out_valid_r_70 <= io_out_valid_r_69;
      io_out_valid_r_71 <= io_out_valid_r_70;
      io_out_valid_r_72 <= io_out_valid_r_71;
      io_out_valid_r_73 <= io_out_valid_r_72;
      io_out_valid_r_74 <= io_out_valid_r_73;
      io_out_valid_r_75 <= io_out_valid_r_74;
      io_out_valid_r_76 <= io_out_valid_r_75;
      io_out_valid_r_77 <= io_out_valid_r_76;
      io_out_valid_r_78 <= io_out_valid_r_77;
      io_out_valid_r_79 <= io_out_valid_r_78;
      io_out_valid_r_80 <= io_out_valid_r_79;
      io_out_valid_r_81 <= io_out_valid_r_80;
      io_out_valid_r_82 <= io_out_valid_r_81;
      io_out_valid_r_83 <= io_out_valid_r_82;
      io_out_valid_r_84 <= io_out_valid_r_83;
      io_out_valid_r_85 <= io_out_valid_r_84;
      io_out_valid_r_86 <= io_out_valid_r_85;
      io_out_valid_r_87 <= io_out_valid_r_86;
      io_out_valid_r_88 <= io_out_valid_r_87;
      io_out_valid_r_89 <= io_out_valid_r_88;
      io_out_valid_r_90 <= io_out_valid_r_89;
      io_out_valid_r_91 <= io_out_valid_r_90;
      io_out_valid_r_92 <= io_out_valid_r_91;
      io_out_valid_r_93 <= io_out_valid_r_92;
      io_out_valid_r_94 <= io_out_valid_r_93;
      io_out_valid_r_95 <= io_out_valid_r_94;
      io_out_valid_r_96 <= io_out_valid_r_95;
      io_out_valid_r_97 <= io_out_valid_r_96;
      io_out_valid_r_98 <= io_out_valid_r_97;
      io_out_valid_r_99 <= io_out_valid_r_98;
      io_out_valid_r_100 <= io_out_valid_r_99;
      io_out_valid_r_101 <= io_out_valid_r_100;
      io_out_valid_r_102 <= io_out_valid_r_101;
      io_out_valid_r_103 <= io_out_valid_r_102;
      io_out_valid_r_104 <= io_out_valid_r_103;
      io_out_valid_r_105 <= io_out_valid_r_104;
      io_out_valid_r_106 <= io_out_valid_r_105;
      io_out_valid_r_107 <= io_out_valid_r_106;
      io_out_valid_r_108 <= io_out_valid_r_107;
      io_out_valid_r_109 <= io_out_valid_r_108;
      io_out_valid_r_110 <= io_out_valid_r_109;
      io_out_valid_r_111 <= io_out_valid_r_110;
      io_out_valid_r_112 <= io_out_valid_r_111;
      io_out_valid_r_113 <= io_out_valid_r_112;
      io_out_valid_r_114 <= io_out_valid_r_113;
      io_out_valid_r_115 <= io_out_valid_r_114;
      io_out_valid_r_116 <= io_out_valid_r_115;
      io_out_valid_r_117 <= io_out_valid_r_116;
      io_out_valid_r_118 <= io_out_valid_r_117;
      io_out_valid_r_119 <= io_out_valid_r_118;
      io_out_valid_r_120 <= io_out_valid_r_119;
      io_out_valid_r_121 <= io_out_valid_r_120;
      io_out_valid_r_122 <= io_out_valid_r_121;
      io_out_valid_r_123 <= io_out_valid_r_122;
      io_out_valid_r_124 <= io_out_valid_r_123;
      io_out_valid_r_125 <= io_out_valid_r_124;
      io_out_valid_r_126 <= io_out_valid_r_125;
      io_out_valid_r_127 <= io_out_valid_r_126;
      io_out_valid_r_128 <= io_out_valid_r_127;
      io_out_valid_r_129 <= io_out_valid_r_128;
      io_out_valid_r_130 <= io_out_valid_r_129;
      io_out_valid_r_131 <= io_out_valid_r_130;
      io_out_valid_r_132 <= io_out_valid_r_131;
      io_out_valid_r_133 <= io_out_valid_r_132;
      io_out_valid_r_134 <= io_out_valid_r_133;
      io_out_valid_r_135 <= io_out_valid_r_134;
      io_out_valid_r_136 <= io_out_valid_r_135;
      io_out_valid_r_137 <= io_out_valid_r_136;
      io_out_valid_r_138 <= io_out_valid_r_137;
      io_out_valid_r_139 <= io_out_valid_r_138;
      io_out_valid_r_140 <= io_out_valid_r_139;
      io_out_valid_r_141 <= io_out_valid_r_140;
      io_out_valid_r_142 <= io_out_valid_r_141;
      io_out_valid_r_143 <= io_out_valid_r_142;
      io_out_valid_r_144 <= io_out_valid_r_143;
      io_out_valid_r_145 <= io_out_valid_r_144;
      io_out_valid_r_146 <= io_out_valid_r_145;
      io_out_valid_r_147 <= io_out_valid_r_146;
      io_out_valid_r_148 <= io_out_valid_r_147;
      io_out_valid_r_149 <= io_out_valid_r_148;
      io_out_valid_r_150 <= io_out_valid_r_149;
      io_out_valid_r_151 <= io_out_valid_r_150;
      io_out_valid_r_152 <= io_out_valid_r_151;
      io_out_valid_r_153 <= io_out_valid_r_152;
      io_out_valid_r_154 <= io_out_valid_r_153;
      io_out_valid_r_155 <= io_out_valid_r_154;
      io_out_valid_r_156 <= io_out_valid_r_155;
      io_out_valid_r_157 <= io_out_valid_r_156;
      io_out_valid_r_158 <= io_out_valid_r_157;
      io_out_valid_r_159 <= io_out_valid_r_158;
      io_out_valid_r_160 <= io_out_valid_r_159;
      io_out_valid_r_161 <= io_out_valid_r_160;
      io_out_valid_r_162 <= io_out_valid_r_161;
      io_out_valid_r_163 <= io_out_valid_r_162;
      io_out_valid_r_164 <= io_out_valid_r_163;
      io_out_valid_r_165 <= io_out_valid_r_164;
      io_out_valid_r_166 <= io_out_valid_r_165;
      io_out_valid_r_167 <= io_out_valid_r_166;
      io_out_valid_r_168 <= io_out_valid_r_167;
      io_out_valid_r_169 <= io_out_valid_r_168;
      io_out_valid_r_170 <= io_out_valid_r_169;
      io_out_valid_r_171 <= io_out_valid_r_170;
      io_out_valid_r_172 <= io_out_valid_r_171;
      io_out_valid_r_173 <= io_out_valid_r_172;
      io_out_valid_r_174 <= io_out_valid_r_173;
      io_out_valid_r_175 <= io_out_valid_r_174;
      io_out_valid_r_176 <= io_out_valid_r_175;
    end
  end // always @(posedge)
  complex_dot_streaming complex_dot (
    .clock      (clock),
    .reset      (reset),
    .io_vec_a_0 (_GEN[_VecB_batch_0_T]),
    .io_vec_a_1 (_GEN[_batch_index_T_3]),
    .io_vec_b_0 (_GEN_0[_VecB_batch_0_T]),
    .io_vec_b_1 (_GEN_0[_batch_index_T_3]),
    .io_in_en   (io_in_en & counter < 32'h64),
    .io_out_s   (_complex_dot_io_out_s)
  );
  complex_acc d2aInst_0 (
    .clock     (clock),
    .reset     (reset),
    .io_input  (_complex_dot_io_out_s),
    .io_in_en  (counter > 32'h23),
    .io_output (_d2aInst_0_io_output)
  );
  complex_acc_1 d2aInst_1 (
    .clock     (clock),
    .reset     (reset),
    .io_input  (_d2aInst_0_io_output),
    .io_in_en  (counter > 32'h31),
    .io_output (_d2aInst_1_io_output)
  );
  complex_acc_2 d2aInst_2 (
    .clock     (clock),
    .reset     (reset),
    .io_input  (_d2aInst_1_io_output),
    .io_in_en  (counter > 32'h40),
    .io_output (_d2aInst_2_io_output)
  );
  complex_acc_3 d2aInst_3 (
    .clock     (clock),
    .reset     (reset),
    .io_input  (_d2aInst_2_io_output),
    .io_in_en  (counter > 32'h51),
    .io_output (_d2aInst_3_io_output)
  );
  complex_acc_4 d2aInst_4 (
    .clock     (clock),
    .reset     (reset),
    .io_input  (_d2aInst_3_io_output),
    .io_in_en  (counter > 32'h66),
    .io_output (_d2aInst_4_io_output)
  );
  complex_acc_5 d2aInst_5 (
    .clock     (clock),
    .reset     (reset),
    .io_input  (_d2aInst_4_io_output),
    .io_in_en  (counter > 32'h83),
    .io_output (_d2aInst_5_io_output)
  );
  assign io_out_valid = io_out_valid_r_176;
  assign io_out_real = _d2aInst_5_io_output[63:32];
  assign io_out_imag = _d2aInst_5_io_output[31:0];
  assign io_out_s = _d2aInst_5_io_output;
endmodule

